{
  "api/MicroUtils.GuidEx.html": {
    "href": "api/MicroUtils.GuidEx.html",
    "title": "Class GuidEx | MicroWrath",
    "keywords": "Class GuidEx Namespace MicroUtils Assembly MicroWrath.dll GUID utils public static class GuidEx Inheritance object GuidEx Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateV5(Guid, string) Create a GUID from a namespace and name according to the UUIDv5 specification (section 5.5). public static Guid CreateV5(Guid ns, string name) Parameters ns Guid UUID namespace. name string Name Returns Guid Guid conforming to UUIDv5 CreateV5(string, string) Create a GUID from a namespace and name according to the UUIDv5 specification (section 5.5), without the requirement that the ns parameter be a valid UUID. public static Guid CreateV5(string ns, string name) Parameters ns string UUID namespace. This method does not enforce UUIDv5 requirement that this parameter is a valid UUID. Use CreateV5(Guid, string) if strict UUIDv5 conformance is required. name string Name Returns Guid Determinstic Guid generated from namespace and name (may conform to UUIDv5). CreateV8(Span<byte>) Create a GUID from the first 16 bytes of a byte array according to the UUIDv8 specification (section 5.58). public static Guid CreateV8(Span<byte> data) Parameters data Span<byte> A byte array containing at least 16 bytes Returns Guid Guid conforming to UUIDv8 Exceptions ArgumentException data is less than 16 bytes"
  },
  "api/MicroUtils.html": {
    "href": "api/MicroUtils.html",
    "title": "Namespace MicroUtils | MicroWrath",
    "keywords": "Namespace MicroUtils Classes GuidEx GUID utils"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.BlueprintInit-1.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.BlueprintInit-1.html",
    "title": "Class BlueprintInitializationContext.BlueprintInit<T> | MicroWrath",
    "keywords": "Class BlueprintInitializationContext.BlueprintInit<T> Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll private class BlueprintInitializationContext.BlueprintInit<T> : BlueprintInitializationContext.ContextInitializer<T>, BlueprintInitializationContext.IBlueprintInit<T>, BlueprintInitializationContext.IBlueprintInit Type Parameters T Inheritance object BlueprintInitializationContext.ContextInitializer BlueprintInitializationContext.ContextInitializer<T> BlueprintInitializationContext.BlueprintInit<T> Implements BlueprintInitializationContext.IBlueprintInit<T> BlueprintInitializationContext.IBlueprintInit Inherited Members BlueprintInitializationContext.ContextInitializer<T>.GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) BlueprintInitializationContext.ContextInitializer<T>.GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) BlueprintInitializationContextExtension.Combine<TOther>(BlueprintInitializationContext.ContextInitializer, BlueprintInitializationContext.ContextInitializer<TOther>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, IMicroBlueprint<TBlueprint>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, OwlcatBlueprint<TBlueprint>) Constructors BlueprintInit(BlueprintInitializationContext, IInitContextBlueprint[], Func<T>) internal BlueprintInit(BlueprintInitializationContext initContext, BlueprintInitializationContext.IInitContextBlueprint[] blueprints, Func<T> initFunc) Parameters initContext BlueprintInitializationContext blueprints IInitContextBlueprint[] initFunc Func<T> BlueprintInit(BlueprintInitializationContext, IEnumerable<IInitContextBlueprint>, Func<T>) internal BlueprintInit(BlueprintInitializationContext initContext, IEnumerable<BlueprintInitializationContext.IInitContextBlueprint> blueprints, Func<T> getValue) Parameters initContext BlueprintInitializationContext blueprints IEnumerable<BlueprintInitializationContext.IInitContextBlueprint> getValue Func<T> Fields Blueprints internal readonly BlueprintInitializationContext.IInitContextBlueprint[] Blueprints Field Value IInitContextBlueprint[] initContext private readonly BlueprintInitializationContext initContext Field Value BlueprintInitializationContext lazyValue private Lazy<T> lazyValue Field Value Lazy<T> Properties InitContext protected override BlueprintInitializationContext InitContext { get; } Property Value BlueprintInitializationContext InitFunc public Func<T> InitFunc { get; } Property Value Func<T> Methods Combine<TOther>(ContextInitializer<TOther>) Product of two initialization states. public override BlueprintInitializationContext.ContextInitializer<(T, TOther)> Combine<TOther>(BlueprintInitializationContext.ContextInitializer<TOther> other) Parameters other BlueprintInitializationContext.ContextInitializer<TOther> Returns BlueprintInitializationContext.ContextInitializer<(T Left, TOther Right)> Context representing the combined initialization state. The state value is the product of the states of the inputs. Type Parameters TOther GetValue() private T GetValue() Returns T Map(Action) Maps an action into this BlueprintInitializationContext. public override BlueprintInitializationContext.ContextInitializer Map(Action action) Parameters action Action Mapped action Returns BlueprintInitializationContext.ContextInitializer Context representing initialization state after evaluation of the mapped action. This context has no explicit state value. Map(Action<T>) Maps an action into this BlueprintInitializationContext. public override BlueprintInitializationContext.ContextInitializer Map(Action<T> action) Parameters action Action<T> Mapped action Returns BlueprintInitializationContext.ContextInitializer Context representing initialization state after evaluation of the mapped action. This context has no explicit state value. Map<TResult>(Func<T, TResult>) Maps a function into this BlueprintInitializationContext. public override BlueprintInitializationContext.ContextInitializer<TResult> Map<TResult>(Func<T, TResult> selector) Parameters selector Func<T, TResult> Returns BlueprintInitializationContext.ContextInitializer<TResult> Context representing initialization state after evaluation of the mapped function. Type Parameters TResult Map<TResult>(Func<TResult>) Maps a function into this BlueprintInitializationContext. public override BlueprintInitializationContext.ContextInitializer<TResult> Map<TResult>(Func<TResult> selector) Parameters selector Func<TResult> Returns BlueprintInitializationContext.ContextInitializer<TResult> Context representing initialization state after evaluation of the mapped function. Type Parameters TResult Register() Registers this initializer for execution public override void Register() With<TResult>(Func<TResult>) private BlueprintInitializationContext.BlueprintInit<TResult> With<TResult>(Func<TResult> getValue) Parameters getValue Func<TResult> Returns BlueprintInitializationContext.BlueprintInit<TResult> Type Parameters TResult Explicit Interface Implementations IBlueprintInit.Execute() void BlueprintInitializationContext.IBlueprintInit.Execute()"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.ContextInitializer-1.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.ContextInitializer-1.html",
    "title": "Class BlueprintInitializationContext.ContextInitializer<T> | MicroWrath",
    "keywords": "Class BlueprintInitializationContext.ContextInitializer<T> Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll Context representing initialization state of type T. internal abstract class BlueprintInitializationContext.ContextInitializer<T> : BlueprintInitializationContext.ContextInitializer Type Parameters T Inheritance object BlueprintInitializationContext.ContextInitializer BlueprintInitializationContext.ContextInitializer<T> Derived BlueprintInitializationContext.BlueprintInit<T> Inherited Members BlueprintInitializationContext.ContextInitializer.InitContext BlueprintInitializationContext.ContextInitializer.Map(Action) BlueprintInitializationContext.ContextInitializer.Map<TResult>(Func<TResult>) BlueprintInitializationContext.ContextInitializer.Register() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods BlueprintInitializationContextExtension.Combine<TOther>(BlueprintInitializationContext.ContextInitializer, BlueprintInitializationContext.ContextInitializer<TOther>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, IMicroBlueprint<TBlueprint>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, OwlcatBlueprint<TBlueprint>) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods Combine<TOther>(ContextInitializer<TOther>) Product of two initialization states. public abstract BlueprintInitializationContext.ContextInitializer<(T Left, TOther Right)> Combine<TOther>(BlueprintInitializationContext.ContextInitializer<TOther> other) Parameters other BlueprintInitializationContext.ContextInitializer<TOther> Returns BlueprintInitializationContext.ContextInitializer<(T Left, TOther Right)> Context representing the combined initialization state. The state value is the product of the states of the inputs. Type Parameters TOther GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Adds an IMicroBlueprint<TBlueprint> blueprint reference to this initializer. The blueprint may not be initialized within this context. public virtual BlueprintInitializationContext.ContextInitializer<(T Left, TBlueprint? Right)> GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint IMicroBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<(T Left, TBlueprint Right)> Type Parameters TBlueprint GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>) Adds an OwlcatBlueprint<TBlueprint> blueprint reference to this initializer. This blueprint is assumed to be initialized. public virtual BlueprintInitializationContext.ContextInitializer<(T Left, TBlueprint Right)> GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint OwlcatBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<(T Left, TBlueprint Right)> Type Parameters TBlueprint Map(Action<T>) Maps an action into this BlueprintInitializationContext. public abstract BlueprintInitializationContext.ContextInitializer Map(Action<T> action) Parameters action Action<T> Mapped action Returns BlueprintInitializationContext.ContextInitializer Context representing initialization state after evaluation of the mapped action. This context has no explicit state value. Map<TResult>(Func<T, TResult>) Maps a function into this BlueprintInitializationContext. public abstract BlueprintInitializationContext.ContextInitializer<TResult> Map<TResult>(Func<T, TResult> selector) Parameters selector Func<T, TResult> Returns BlueprintInitializationContext.ContextInitializer<TResult> Context representing initialization state after evaluation of the mapped function. Type Parameters TResult"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.ContextInitializer.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.ContextInitializer.html",
    "title": "Class BlueprintInitializationContext.ContextInitializer | MicroWrath",
    "keywords": "Class BlueprintInitializationContext.ContextInitializer Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll Context representing initialization state with no explicit state value. internal abstract class BlueprintInitializationContext.ContextInitializer Inheritance object BlueprintInitializationContext.ContextInitializer Derived BlueprintInitializationContext.ContextInitializer<T> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods BlueprintInitializationContextExtension.Combine<TOther>(BlueprintInitializationContext.ContextInitializer, BlueprintInitializationContext.ContextInitializer<TOther>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, IMicroBlueprint<TBlueprint>) BlueprintInitializationContextExtension.GetBlueprint<TBlueprint>(BlueprintInitializationContext.ContextInitializer, OwlcatBlueprint<TBlueprint>) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties InitContext protected abstract BlueprintInitializationContext InitContext { get; } Property Value BlueprintInitializationContext Methods Map(Action) Maps an action into this BlueprintInitializationContext. public abstract BlueprintInitializationContext.ContextInitializer Map(Action action) Parameters action Action Mapped action Returns BlueprintInitializationContext.ContextInitializer Context representing initialization state after evaluation of the mapped action. This context has no explicit state value. Map<TResult>(Func<TResult>) Maps a function into this BlueprintInitializationContext. public abstract BlueprintInitializationContext.ContextInitializer<TResult> Map<TResult>(Func<TResult> mapper) Parameters mapper Func<TResult> Mapped function Returns BlueprintInitializationContext.ContextInitializer<TResult> Context representing initialization state after evaluation of the mapped function. Type Parameters TResult Register() Registers this initializer for execution public abstract void Register()"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IBlueprintInit-1.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IBlueprintInit-1.html",
    "title": "Interface BlueprintInitializationContext.IBlueprintInit<T> | MicroWrath",
    "keywords": "Interface BlueprintInitializationContext.IBlueprintInit<T> Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll private interface BlueprintInitializationContext.IBlueprintInit<T> : BlueprintInitializationContext.IBlueprintInit Type Parameters T Inherited Members BlueprintInitializationContext.IBlueprintInit.Execute() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties InitFunc Func<T> InitFunc { get; } Property Value Func<T>"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IBlueprintInit.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IBlueprintInit.html",
    "title": "Interface BlueprintInitializationContext.IBlueprintInit | MicroWrath",
    "keywords": "Interface BlueprintInitializationContext.IBlueprintInit Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll private interface BlueprintInitializationContext.IBlueprintInit Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods Execute() void Execute()"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IInitContextBlueprint.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.IInitContextBlueprint.html",
    "title": "Interface BlueprintInitializationContext.IInitContextBlueprint | MicroWrath",
    "keywords": "Interface BlueprintInitializationContext.IInitContextBlueprint Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll private interface BlueprintInitializationContext.IInitContextBlueprint Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties Blueprint SimpleBlueprint Blueprint { get; } Property Value SimpleBlueprint BlueprintGuid BlueprintGuid BlueprintGuid { get; } Property Value BlueprintGuid Name string Name { get; } Property Value string Methods CreateNew() SimpleBlueprint CreateNew() Returns SimpleBlueprint"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.InitContextBlueprint-1.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.InitContextBlueprint-1.html",
    "title": "Class BlueprintInitializationContext.InitContextBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Class BlueprintInitializationContext.InitContextBlueprint<TBlueprint> Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll private class BlueprintInitializationContext.InitContextBlueprint<TBlueprint> : IMicroBlueprint<TBlueprint>, BlueprintInitializationContext.IInitContextBlueprint where TBlueprint : SimpleBlueprint, new() Type Parameters TBlueprint Inheritance object BlueprintInitializationContext.InitContextBlueprint<TBlueprint> Implements IMicroBlueprint<TBlueprint> BlueprintInitializationContext.IInitContextBlueprint Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Constructors InitContextBlueprint(BlueprintGuid, string) internal InitContextBlueprint(BlueprintGuid guid, string name) Parameters guid BlueprintGuid name string InitContextBlueprint(string, string) internal InitContextBlueprint(string assetId, string name) Parameters assetId string name string Fields AssetId public readonly string AssetId Field Value string Name public readonly string Name Field Value string blueprint private TBlueprint? blueprint Field Value TBlueprint Properties BlueprintGuid public BlueprintGuid BlueprintGuid { get; } Property Value BlueprintGuid Methods CreateNew() public TBlueprint CreateNew() Returns TBlueprint Explicit Interface Implementations IInitContextBlueprint.Blueprint SimpleBlueprint BlueprintInitializationContext.IInitContextBlueprint.Blueprint { get; } Returns SimpleBlueprint IInitContextBlueprint.CreateNew() SimpleBlueprint BlueprintInitializationContext.IInitContextBlueprint.CreateNew() Returns SimpleBlueprint IInitContextBlueprint.Name string BlueprintInitializationContext.IInitContextBlueprint.Name { get; } Returns string IMicroBlueprint<TBlueprint>.BlueprintGuid BlueprintGuid IMicroBlueprint<TBlueprint>.BlueprintGuid { get; } Returns BlueprintGuid IMicroBlueprint<TBlueprint>.GetBlueprint() Retrieves the blueprint (Kingmaker.Blueprints.ResourcesLibrary.TryGetBlueprint(Kingmaker.Blueprints.BlueprintGuid)). Returns null if the blueprint is not present. TBlueprint? IMicroBlueprint<TBlueprint>.GetBlueprint() Returns TBlueprint"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContext.html",
    "title": "Class BlueprintInitializationContext | MicroWrath",
    "keywords": "Class BlueprintInitializationContext Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll [Obsolete] internal class BlueprintInitializationContext Inheritance object BlueprintInitializationContext Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors BlueprintInitializationContext(IObservable<Unit>) Create a new context for blueprint initialization internal BlueprintInitializationContext(IObservable<Unit> trigger) Parameters trigger IObservable<Unit> The event used to trigger evaluation of this context Fields Blueprints private readonly Dictionary<BlueprintGuid, BlueprintInitializationContext.IInitContextBlueprint> Blueprints Field Value Dictionary<BlueprintGuid, BlueprintInitializationContext.IInitContextBlueprint> Initializers private readonly List<Action> Initializers Field Value List<Action> Trigger private readonly IObservable<Unit> Trigger Field Value IObservable<Unit> done private IDisposable? done Field Value IDisposable Properties Empty Adds an empty initializer to the context. public BlueprintInitializationContext.ContextInitializer Empty { get; } Property Value BlueprintInitializationContext.ContextInitializer Methods CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, BlueprintGuid, string) Deep clones an existing blueprint. public BlueprintInitializationContext.ContextInitializer<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, BlueprintGuid guid, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> Blueprint to clone guid BlueprintGuid New blueprint guid name string New blueprint name Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, GeneratedGuid) Deep clones an existing blueprint. This overload uses the name property from a GeneratedGuid object for the new blueprint's name. public BlueprintInitializationContext.ContextInitializer<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, GeneratedGuid generatedGuid) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> Blueprint to clone generatedGuid GeneratedGuid New blueprint guid Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Type Parameters TBlueprint Blueprint type CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, string, string) Deep clones an existing blueprint. public BlueprintInitializationContext.ContextInitializer<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> Blueprint to clone assetId string New blueprint guid name string New blueprint name Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type Complete() private void Complete() GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Adds a new initializer to the context for an existing blueprint. public BlueprintInitializationContext.ContextInitializer<TBlueprint?> GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint IMicroBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>) Adds a new initializer to the context for an (existing) OwlcatBlueprint. public BlueprintInitializationContext.ContextInitializer<TBlueprint> GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint OwlcatBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type NewBlueprint<TBlueprint>(BlueprintGuid, string) Adds a new initializer to the context that adds a new blueprint to the library. public BlueprintInitializationContext.ContextInitializer<TBlueprint> NewBlueprint<TBlueprint>(BlueprintGuid guid, string name) where TBlueprint : SimpleBlueprint, new() Parameters guid BlueprintGuid GUID for new blueprint name string name for new blueprint Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type NewBlueprint<TBlueprint>(GeneratedGuid) Adds a new initializer to the context that adds a new blueprint to the library. This overload uses the name property from a GeneratedGuid object for the new blueprint's name. public BlueprintInitializationContext.ContextInitializer<TBlueprint> NewBlueprint<TBlueprint>(GeneratedGuid generatedGuid) where TBlueprint : SimpleBlueprint, new() Parameters generatedGuid GeneratedGuid GUID for new blueprint Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type NewBlueprint<TBlueprint>(Func<TBlueprint>) Adds a new initializer to the context, using a provided constructor function to create the blueprint object. public BlueprintInitializationContext.ContextInitializer<TBlueprint> NewBlueprint<TBlueprint>(Func<TBlueprint> initFunc) where TBlueprint : SimpleBlueprint, new() Parameters initFunc Func<TBlueprint> Constructor function Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type NewBlueprint<TBlueprint>(string, string) Adds a new initializer to the context that adds a new blueprint to the library public BlueprintInitializationContext.ContextInitializer<TBlueprint> NewBlueprint<TBlueprint>(string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters assetId string GUID for new blueprint name string name for new blueprint Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprint type NewBlueprints<TBlueprint, TState>(IEnumerable<(BlueprintGuid guid, string name, TState state)>) Adds a new initializer to the context containing multiple new blueprints. public BlueprintInitializationContext.ContextInitializer<IEnumerable<(TBlueprint, TState)>> NewBlueprints<TBlueprint, TState>(IEnumerable<(BlueprintGuid guid, string name, TState state)> values) where TBlueprint : SimpleBlueprint, new() Parameters values IEnumerable<(BlueprintGuid guid, string name, TState state)> Collection of guids, names, and TState values Returns BlueprintInitializationContext.ContextInitializer<IEnumerable<(TBlueprint, TState)>> Blueprint initialization context for additional initialization steps Type Parameters TBlueprint Blueprints type TState Arbitrary data associated with each new blueprint Register(IBlueprintInit, IEnumerable<IInitContextBlueprint>) private void Register(BlueprintInitializationContext.IBlueprintInit bpContext, IEnumerable<BlueprintInitializationContext.IInitContextBlueprint> blueprints) Parameters bpContext BlueprintInitializationContext.IBlueprintInit blueprints IEnumerable<BlueprintInitializationContext.IInitContextBlueprint>"
  },
  "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContextExtension.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.BlueprintInitializationContextExtension.html",
    "title": "Class BlueprintInitializationContextExtension | MicroWrath",
    "keywords": "Class BlueprintInitializationContextExtension Namespace MicroWrath.BlueprintInitializationContext Assembly MicroWrath.dll [Obsolete] internal static class BlueprintInitializationContextExtension Inheritance object BlueprintInitializationContextExtension Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Combine<TOther>(ContextInitializer, ContextInitializer<TOther>) Product of two initialization states. internal static BlueprintInitializationContext.ContextInitializer<TOther> Combine<TOther>(this BlueprintInitializationContext.ContextInitializer obj, BlueprintInitializationContext.ContextInitializer<TOther> other) Parameters obj BlueprintInitializationContext.ContextInitializer other BlueprintInitializationContext.ContextInitializer<TOther> Returns BlueprintInitializationContext.ContextInitializer<TOther> Context representing the combined initialization state. The state value is the product of the states of the inputs. Type Parameters TOther Combine<T>(IEnumerable<ContextInitializer<T>>) Combines multiple initializer contexts. internal static BlueprintInitializationContext.ContextInitializer<IEnumerable<T>> Combine<T>(this IEnumerable<BlueprintInitializationContext.ContextInitializer<T>> bpcs) Parameters bpcs IEnumerable<BlueprintInitializationContext.ContextInitializer<T>> Returns BlueprintInitializationContext.ContextInitializer<IEnumerable<T>> Type Parameters T GetBlueprint<TBlueprint>(ContextInitializer, IMicroBlueprint<TBlueprint>) Adds an IMicroBlueprint<TBlueprint> blueprint reference to this initializer. The blueprint may not be initialized within this context. internal static BlueprintInitializationContext.ContextInitializer<TBlueprint?> GetBlueprint<TBlueprint>(this BlueprintInitializationContext.ContextInitializer obj, IMicroBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters obj BlueprintInitializationContext.ContextInitializer blueprint IMicroBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Type Parameters TBlueprint GetBlueprint<TBlueprint>(ContextInitializer, OwlcatBlueprint<TBlueprint>) Adds an OwlcatBlueprint<TBlueprint> blueprint reference to this initializer. This blueprint is assumed to be initialized. internal static BlueprintInitializationContext.ContextInitializer<TBlueprint> GetBlueprint<TBlueprint>(this BlueprintInitializationContext.ContextInitializer obj, OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters obj BlueprintInitializationContext.ContextInitializer blueprint OwlcatBlueprint<TBlueprint> Returns BlueprintInitializationContext.ContextInitializer<TBlueprint> Type Parameters TBlueprint"
  },
  "api/MicroWrath.BlueprintInitializationContext.html": {
    "href": "api/MicroWrath.BlueprintInitializationContext.html",
    "title": "Namespace MicroWrath.BlueprintInitializationContext | MicroWrath",
    "keywords": "Namespace MicroWrath.BlueprintInitializationContext Classes BlueprintInitializationContext BlueprintInitializationContext.BlueprintInit<T> BlueprintInitializationContext.ContextInitializer Context representing initialization state with no explicit state value. BlueprintInitializationContext.ContextInitializer<T> Context representing initialization state of type T. BlueprintInitializationContext.InitContextBlueprint<TBlueprint> BlueprintInitializationContextExtension Interfaces BlueprintInitializationContext.IBlueprintInit BlueprintInitializationContext.IBlueprintInit<T> BlueprintInitializationContext.IInitContextBlueprint"
  },
  "api/MicroWrath.BlueprintsDb.BlueprintsDb.Owlcat.html": {
    "href": "api/MicroWrath.BlueprintsDb.BlueprintsDb.Owlcat.html",
    "title": "Class BlueprintsDb.Owlcat | MicroWrath",
    "keywords": "Class BlueprintsDb.Owlcat Namespace MicroWrath.BlueprintsDb Assembly MicroWrath.dll internal static class BlueprintsDb.Owlcat Inheritance object BlueprintsDb.Owlcat Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/MicroWrath.BlueprintsDb.BlueprintsDb.html": {
    "href": "api/MicroWrath.BlueprintsDb.BlueprintsDb.html",
    "title": "Class BlueprintsDb | MicroWrath",
    "keywords": "Class BlueprintsDb Namespace MicroWrath.BlueprintsDb Assembly MicroWrath.dll internal static class BlueprintsDb Inheritance object BlueprintsDb Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/MicroWrath.BlueprintsDb.html": {
    "href": "api/MicroWrath.BlueprintsDb.html",
    "title": "Namespace MicroWrath.BlueprintsDb | MicroWrath",
    "keywords": "Namespace MicroWrath.BlueprintsDb Classes BlueprintsDb BlueprintsDb.Owlcat"
  },
  "api/MicroWrath.Components.ArcaneSpellFailureComponent.html": {
    "href": "api/MicroWrath.Components.ArcaneSpellFailureComponent.html",
    "title": "Class ArcaneSpellFailureComponent | MicroWrath",
    "keywords": "Class ArcaneSpellFailureComponent Namespace MicroWrath.Components Assembly MicroWrath.dll Adds arcane spell failure chance to this ability. [HarmonyPatch(typeof(AbilityData), \"IsAffectedByArcaneSpellFailure\", MethodType.Getter)] internal class ArcaneSpellFailureComponent : BlueprintComponent, ICanBeLogContext, IHavePrototype Inheritance object BlueprintComponent ArcaneSpellFailureComponent Implements ICanBeLogContext IHavePrototype Inherited Members BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?)"
  },
  "api/MicroWrath.Components.ContextAddTemporaryHP.ComponentData.html": {
    "href": "api/MicroWrath.Components.ContextAddTemporaryHP.ComponentData.html",
    "title": "Class ContextAddTemporaryHP.ComponentData | MicroWrath",
    "keywords": "Class ContextAddTemporaryHP.ComponentData Namespace MicroWrath.Components Assembly MicroWrath.dll public class ContextAddTemporaryHP.ComponentData Inheritance object ContextAddTemporaryHP.ComponentData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Modifier [JsonProperty] public ModifiableValue.Modifier? Modifier Field Value ModifiableValue.Modifier"
  },
  "api/MicroWrath.Components.ContextAddTemporaryHP.html": {
    "href": "api/MicroWrath.Components.ContextAddTemporaryHP.html",
    "title": "Class ContextAddTemporaryHP | MicroWrath",
    "keywords": "Class ContextAddTemporaryHP Namespace MicroWrath.Components Assembly MicroWrath.dll Add temporary HP with Kingmaker.UnitLogic.Mechanics.ContextValue value. [AllowedOn(typeof(BlueprintBuff), false)] internal class ContextAddTemporaryHP : UnitBuffComponentDelegate<ContextAddTemporaryHP.ComponentData>, ICanBeLogContext, IHavePrototype, IRuntimeEntityFactComponentProvider, ISubscriber Inheritance object BlueprintComponent EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData> UnitFactComponentDelegate<ContextAddTemporaryHP.ComponentData> UnitBuffComponentDelegate<ContextAddTemporaryHP.ComponentData> ContextAddTemporaryHP Implements ICanBeLogContext IHavePrototype IRuntimeEntityFactComponentProvider ISubscriber Inherited Members UnitBuffComponentDelegate<ContextAddTemporaryHP.ComponentData>.OnRemoved() UnitBuffComponentDelegate<ContextAddTemporaryHP.ComponentData>.CreateRuntimeFactComponent() UnitBuffComponentDelegate<ContextAddTemporaryHP.ComponentData>.Buff UnitFactComponentDelegate<ContextAddTemporaryHP.ComponentData>.Fact UnitFactComponentDelegate<ContextAddTemporaryHP.ComponentData>.Param EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.ClearData() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.GetSubscribingUnit() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.CreateRuntimeFactComponent() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnFactAttached() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnInitialize() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnActivate() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnDeactivate() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnTurnOn() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnTurnOff() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnPreSave() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnPostLoad() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnApplyPostLoadFixes() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnViewDidAttach() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnViewWillDetach() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnDispose() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.OnRecalculate() EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.Runtime EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.Owner EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.Fact EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.Context EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.Data EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.MaybeData EntityFactComponentDelegate<UnitEntityData, ContextAddTemporaryHP.ComponentData>.IsReapplying BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Descriptor public ModifierDescriptor Descriptor Field Value ModifierDescriptor Value public ContextValue Value Field Value ContextValue Methods OnActivate() public override void OnActivate() OnTurnOff() public override void OnTurnOff()"
  },
  "api/MicroWrath.Components.OverrideSelectionPriority.html": {
    "href": "api/MicroWrath.Components.OverrideSelectionPriority.html",
    "title": "Class OverrideSelectionPriority | MicroWrath",
    "keywords": "Class OverrideSelectionPriority Namespace MicroWrath.Components Assembly MicroWrath.dll [Obsolete] [AllowedOn(typeof(BlueprintFeatureSelection), false)] [AllowedOn(typeof(BlueprintParametrizedFeature), false)] internal class OverrideSelectionPriority : BlueprintComponent, ICanBeLogContext, IHavePrototype Inheritance object BlueprintComponent OverrideSelectionPriority Implements ICanBeLogContext IHavePrototype Inherited Members BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Priority public CharGenPhaseBaseVM.ChargenPhasePriority Priority Field Value CharGenPhaseBaseVM.ChargenPhasePriority"
  },
  "api/MicroWrath.Components.OverrideUIFeatureGroup.UIFeatureGroup.html": {
    "href": "api/MicroWrath.Components.OverrideUIFeatureGroup.UIFeatureGroup.html",
    "title": "Enum OverrideUIFeatureGroup.UIFeatureGroup | MicroWrath",
    "keywords": "Enum OverrideUIFeatureGroup.UIFeatureGroup Namespace MicroWrath.Components Assembly MicroWrath.dll internal enum OverrideUIFeatureGroup.UIFeatureGroup Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Ability = 1 Feat = 2 None = 0 Trait = 3"
  },
  "api/MicroWrath.Components.OverrideUIFeatureGroup.html": {
    "href": "api/MicroWrath.Components.OverrideUIFeatureGroup.html",
    "title": "Class OverrideUIFeatureGroup | MicroWrath",
    "keywords": "Class OverrideUIFeatureGroup Namespace MicroWrath.Components Assembly MicroWrath.dll Set UI feature group. [AllowedOn(typeof(BlueprintFeature), false)] [AllowedOn(typeof(BlueprintFeatureSelection), false)] [AllowedOn(typeof(BlueprintParametrizedFeature), false)] [AllowedOn(typeof(BlueprintProgression), false)] internal class OverrideUIFeatureGroup : BlueprintComponent, ICanBeLogContext, IHavePrototype Inheritance object BlueprintComponent OverrideUIFeatureGroup Implements ICanBeLogContext IHavePrototype Inherited Members BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Group public OverrideUIFeatureGroup.UIFeatureGroup Group Field Value OverrideUIFeatureGroup.UIFeatureGroup"
  },
  "api/MicroWrath.Components.SelectionPriority.html": {
    "href": "api/MicroWrath.Components.SelectionPriority.html",
    "title": "Class SelectionPriority | MicroWrath",
    "keywords": "Class SelectionPriority Namespace MicroWrath.Components Assembly MicroWrath.dll Set selection priority during level up. [HarmonyPatch] [AllowedOn(typeof(IFeatureSelection), false)] [AllowedOn(typeof(BlueprintFeatureSelection), false)] [AllowedOn(typeof(BlueprintParametrizedFeature), false)] internal class SelectionPriority : BlueprintComponent, ICanBeLogContext, IHavePrototype Inheritance object BlueprintComponent SelectionPriority Implements ICanBeLogContext IHavePrototype Inherited Members BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields ActionPriority Level up action priority (when the selection is applied). public LevelUpActionPriority? ActionPriority Field Value LevelUpActionPriority? PhasePriority Phase priority (relative tab position). public CharGenPhaseBaseVM.ChargenPhasePriority? PhasePriority Field Value CharGenPhaseBaseVM.ChargenPhasePriority?"
  },
  "api/MicroWrath.Components.UnitFactActivateEvent.html": {
    "href": "api/MicroWrath.Components.UnitFactActivateEvent.html",
    "title": "Class UnitFactActivateEvent | MicroWrath",
    "keywords": "Class UnitFactActivateEvent Namespace MicroWrath.Components Assembly MicroWrath.dll Event triggered by Kingmaker.EntitySystem.EntityFactComponentDelegate<TEntity, TData>.OnActivate(). [AllowedOn(typeof(BlueprintUnitFact), false)] [AllowedOn(typeof(BlueprintUnit), false)] internal class UnitFactActivateEvent : UnitFactEvent, ICanBeLogContext, IHavePrototype, IRuntimeEntityFactComponentProvider, ISubscriber Inheritance object BlueprintComponent EntityFactComponentDelegate<UnitEntityData, EmptyComponentData> UnitFactComponentDelegate<EmptyComponentData> UnitFactComponentDelegate UnitFactEvent UnitFactActivateEvent Implements ICanBeLogContext IHavePrototype IRuntimeEntityFactComponentProvider ISubscriber Inherited Members UnitFactEvent.ActivateEvent UnitFactEvent.OnActivate() UnitFactEvent.DeactivateEvent UnitFactEvent.OnDeactivate() UnitFactEvent.DisposeEvent UnitFactEvent.OnDispose() UnitFactEvent.FactAttachedEvent UnitFactEvent.OnFactAttached() UnitFactEvent.InitializeEvent UnitFactEvent.OnInitialize() UnitFactEvent.ApplyPostLoadFixesEvent UnitFactEvent.OnApplyPostLoadFixes() UnitFactEvent.PostLoadEvent UnitFactEvent.OnPostLoad() UnitFactEvent.PreSaveEvent UnitFactEvent.OnPreSave() UnitFactEvent.RecalculateEvent UnitFactEvent.OnRecalculate() UnitFactEvent.TurnOffEvent UnitFactEvent.OnTurnOff() UnitFactEvent.TurnOnEvent UnitFactEvent.OnTurnOn() UnitFactEvent.ViewDidAttachEvent UnitFactEvent.OnViewDidAttach() UnitFactEvent.ViewWillDetachEvent UnitFactEvent.OnViewWillDetach() UnitFactComponentDelegate<EmptyComponentData>.Fact UnitFactComponentDelegate<EmptyComponentData>.Param EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.ClearData() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.GetSubscribingUnit() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.CreateRuntimeFactComponent() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnFactAttached() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnInitialize() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnActivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDeactivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOn() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOff() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPreSave() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPostLoad() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnApplyPostLoadFixes() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewDidAttach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewWillDetach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDispose() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnRecalculate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Runtime EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Owner EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Fact EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Context EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Data EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.MaybeData EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.IsReapplying BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors UnitFactActivateEvent(Action<UnitFactActivateEvent>) public UnitFactActivateEvent(Action<UnitFactActivateEvent> handler) Parameters handler Action<UnitFactActivateEvent> Fields handler protected readonly Action handler Field Value Action"
  },
  "api/MicroWrath.Components.UnitFactEvent.html": {
    "href": "api/MicroWrath.Components.UnitFactEvent.html",
    "title": "Class UnitFactEvent | MicroWrath",
    "keywords": "Class UnitFactEvent Namespace MicroWrath.Components Assembly MicroWrath.dll Events triggered by Kingmaker.UnitLogic.UnitFactComponentDelegate methods. internal abstract class UnitFactEvent : UnitFactComponentDelegate, ICanBeLogContext, IHavePrototype, IRuntimeEntityFactComponentProvider, ISubscriber Inheritance object BlueprintComponent EntityFactComponentDelegate<UnitEntityData, EmptyComponentData> UnitFactComponentDelegate<EmptyComponentData> UnitFactComponentDelegate UnitFactEvent Implements ICanBeLogContext IHavePrototype IRuntimeEntityFactComponentProvider ISubscriber Derived UnitFactActivateEvent Inherited Members UnitFactComponentDelegate<EmptyComponentData>.Fact UnitFactComponentDelegate<EmptyComponentData>.Param EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.ClearData() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.GetSubscribingUnit() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.CreateRuntimeFactComponent() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnFactAttached() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnInitialize() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnActivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDeactivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOn() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOff() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPreSave() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPostLoad() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnApplyPostLoadFixes() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewDidAttach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewWillDetach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDispose() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnRecalculate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Runtime EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Owner EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Fact EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Context EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Data EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.MaybeData EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.IsReapplying BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods OnActivate() public override void OnActivate() OnApplyPostLoadFixes() public override void OnApplyPostLoadFixes() OnDeactivate() public override void OnDeactivate() OnDispose() public override void OnDispose() OnFactAttached() public override void OnFactAttached() OnInitialize() public override void OnInitialize() OnPostLoad() public override void OnPostLoad() OnPreSave() public override void OnPreSave() OnRecalculate() public override void OnRecalculate() OnTurnOff() public override void OnTurnOff() OnTurnOn() public override void OnTurnOn() OnViewDidAttach() public override void OnViewDidAttach() OnViewWillDetach() public override void OnViewWillDetach() Events ActivateEvent protected event Action ActivateEvent Event Type Action ApplyPostLoadFixesEvent protected event Action ApplyPostLoadFixesEvent Event Type Action DeactivateEvent protected event Action DeactivateEvent Event Type Action DisposeEvent protected event Action DisposeEvent Event Type Action FactAttachedEvent protected event Action FactAttachedEvent Event Type Action InitializeEvent protected event Action InitializeEvent Event Type Action PostLoadEvent protected event Action PostLoadEvent Event Type Action PreSaveEvent protected event Action PreSaveEvent Event Type Action RecalculateEvent protected event Action RecalculateEvent Event Type Action TurnOffEvent protected event Action TurnOffEvent Event Type Action TurnOnEvent protected event Action TurnOnEvent Event Type Action ViewDidAttachEvent protected event Action ViewDidAttachEvent Event Type Action ViewWillDetachEvent protected event Action ViewWillDetachEvent Event Type Action"
  },
  "api/MicroWrath.Components.html": {
    "href": "api/MicroWrath.Components.html",
    "title": "Namespace MicroWrath.Components | MicroWrath",
    "keywords": "Namespace MicroWrath.Components Classes ArcaneSpellFailureComponent Adds arcane spell failure chance to this ability. ContextAddTemporaryHP Add temporary HP with Kingmaker.UnitLogic.Mechanics.ContextValue value. ContextAddTemporaryHP.ComponentData OverrideSelectionPriority OverrideUIFeatureGroup Set UI feature group. SelectionPriority Set selection priority during level up. UnitFactActivateEvent Event triggered by Kingmaker.EntitySystem.EntityFactComponentDelegate<TEntity, TData>.OnActivate(). UnitFactEvent Events triggered by Kingmaker.UnitLogic.UnitFactComponentDelegate methods. Enums OverrideUIFeatureGroup.UIFeatureGroup"
  },
  "api/MicroWrath.Constructors.BlueprintReflectionInitializer-1.html": {
    "href": "api/MicroWrath.Constructors.BlueprintReflectionInitializer-1.html",
    "title": "Class BlueprintReflectionInitializer<TBlueprint> | MicroWrath",
    "keywords": "Class BlueprintReflectionInitializer<TBlueprint> Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal class BlueprintReflectionInitializer<TBlueprint> : ReflectionInitializer<TBlueprint>, IReflectionInitializer, Construct.IBlueprintConstructor<TBlueprint> where TBlueprint : SimpleBlueprint, new() Type Parameters TBlueprint Inheritance object ReflectionInitializer<TBlueprint> BlueprintReflectionInitializer<TBlueprint> Implements IReflectionInitializer Construct.IBlueprintConstructor<TBlueprint> Inherited Members ReflectionInitializer<TBlueprint>.ForType ReflectionInitializer<TBlueprint>.defaults ReflectionInitializer<TBlueprint>.GetDefaultMemberValueGetter(Type) ReflectionInitializer<TBlueprint>.GetFieldInitializers() ReflectionInitializer<TBlueprint>.FieldInitializers ReflectionInitializer<TBlueprint>.GetPropertyInitializers() ReflectionInitializer<TBlueprint>.PropertyInitializers ReflectionInitializer<TBlueprint>.GetTypeInitializerMethods() ReflectionInitializer<TBlueprint>.TypeInitializerMethod ReflectionInitializer<TBlueprint>.Initialize(TBlueprint) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors BlueprintReflectionInitializer(Type) internal BlueprintReflectionInitializer(Type defaultInitializersType) Parameters defaultInitializersType Type Methods New(string, string) public TBlueprint New(string assetId, string name) Parameters assetId string name string Returns TBlueprint"
  },
  "api/MicroWrath.Constructors.ComponentReflectionInitializer-1.html": {
    "href": "api/MicroWrath.Constructors.ComponentReflectionInitializer-1.html",
    "title": "Class ComponentReflectionInitializer<TComponent> | MicroWrath",
    "keywords": "Class ComponentReflectionInitializer<TComponent> Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal class ComponentReflectionInitializer<TComponent> : ReflectionInitializer<TComponent>, IReflectionInitializer, Construct.IComponentConstructor<TComponent> where TComponent : BlueprintComponent, new() Type Parameters TComponent Inheritance object ReflectionInitializer<TComponent> ComponentReflectionInitializer<TComponent> Implements IReflectionInitializer Construct.IComponentConstructor<TComponent> Inherited Members ReflectionInitializer<TComponent>.ForType ReflectionInitializer<TComponent>.defaults ReflectionInitializer<TComponent>.GetDefaultMemberValueGetter(Type) ReflectionInitializer<TComponent>.GetFieldInitializers() ReflectionInitializer<TComponent>.FieldInitializers ReflectionInitializer<TComponent>.GetPropertyInitializers() ReflectionInitializer<TComponent>.PropertyInitializers ReflectionInitializer<TComponent>.GetTypeInitializerMethods() ReflectionInitializer<TComponent>.TypeInitializerMethod ReflectionInitializer<TComponent>.Initialize(TComponent) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ComponentReflectionInitializer(Type) public ComponentReflectionInitializer(Type defaultInitializersType) Parameters defaultInitializersType Type Methods New() public TComponent New() Returns TComponent"
  },
  "api/MicroWrath.Constructors.Construct.BlueprintConstructor.html": {
    "href": "api/MicroWrath.Constructors.Construct.BlueprintConstructor.html",
    "title": "Class Construct.BlueprintConstructor | MicroWrath",
    "keywords": "Class Construct.BlueprintConstructor Namespace MicroWrath.Constructors Assembly MicroWrath.dll private class Construct.BlueprintConstructor : Construct.IBlueprintConstructor<SimpleBlueprint> Inheritance object Construct.BlueprintConstructor Implements Construct.IBlueprintConstructor<SimpleBlueprint> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors BlueprintConstructor() internal BlueprintConstructor() Fields initializers private static readonly Dictionary<Type, IReflectionInitializer> initializers Field Value Dictionary<Type, IReflectionInitializer> Methods New<TBlueprint>(string, string) public TBlueprint New<TBlueprint>(string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters assetId string name string Returns TBlueprint Type Parameters TBlueprint Explicit Interface Implementations IBlueprintConstructor<SimpleBlueprint>.New(string, string) SimpleBlueprint Construct.IBlueprintConstructor<SimpleBlueprint>.New(string assetId, string name) Parameters assetId string name string Returns SimpleBlueprint"
  },
  "api/MicroWrath.Constructors.Construct.ComponentConstructor.html": {
    "href": "api/MicroWrath.Constructors.Construct.ComponentConstructor.html",
    "title": "Class Construct.ComponentConstructor | MicroWrath",
    "keywords": "Class Construct.ComponentConstructor Namespace MicroWrath.Constructors Assembly MicroWrath.dll private class Construct.ComponentConstructor : Construct.IComponentConstructor<BlueprintComponent> Inheritance object Construct.ComponentConstructor Implements Construct.IComponentConstructor<BlueprintComponent> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ComponentConstructor() internal ComponentConstructor() Fields initializers private static readonly Dictionary<Type, IReflectionInitializer> initializers Field Value Dictionary<Type, IReflectionInitializer> Methods New<TComponent>() public TComponent New<TComponent>() where TComponent : BlueprintComponent, new() Returns TComponent Type Parameters TComponent Explicit Interface Implementations IComponentConstructor<BlueprintComponent>.New() BlueprintComponent Construct.IComponentConstructor<BlueprintComponent>.New() Returns BlueprintComponent"
  },
  "api/MicroWrath.Constructors.Construct.IBlueprintConstructor-1.html": {
    "href": "api/MicroWrath.Constructors.Construct.IBlueprintConstructor-1.html",
    "title": "Interface Construct.IBlueprintConstructor<TBlueprint> | MicroWrath",
    "keywords": "Interface Construct.IBlueprintConstructor<TBlueprint> Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal interface Construct.IBlueprintConstructor<TBlueprint> where TBlueprint : SimpleBlueprint, new() Type Parameters TBlueprint Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods New(string, string) TBlueprint New(string assetId, string name) Parameters assetId string name string Returns TBlueprint"
  },
  "api/MicroWrath.Constructors.Construct.IComponentConstructor-1.html": {
    "href": "api/MicroWrath.Constructors.Construct.IComponentConstructor-1.html",
    "title": "Interface Construct.IComponentConstructor<TComponent> | MicroWrath",
    "keywords": "Interface Construct.IComponentConstructor<TComponent> Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal interface Construct.IComponentConstructor<TComponent> where TComponent : BlueprintComponent, new() Type Parameters TComponent Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods New() TComponent New() Returns TComponent"
  },
  "api/MicroWrath.Constructors.Construct.New.html": {
    "href": "api/MicroWrath.Constructors.Construct.New.html",
    "title": "Class Construct.New | MicroWrath",
    "keywords": "Class Construct.New Namespace MicroWrath.Constructors Assembly MicroWrath.dll Blueprint/Component constructors using Default. public static class Construct.New Inheritance object Construct.New Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Blueprint<TBlueprint>(GeneratedGuid) Creates a new blueprint. Fields are initialized using Default values. public static TBlueprint Blueprint<TBlueprint>(GeneratedGuid generatedGuid) where TBlueprint : SimpleBlueprint, new() Parameters generatedGuid GeneratedGuid Asset ID for the new blueprint (Kingmaker.Blueprints.SimpleBlueprint.AssetGuid). Uses Key as blueprint name (Kingmaker.Blueprints.SimpleBlueprint.name). Returns TBlueprint New blueprint. Type Parameters TBlueprint Blueprint type. Blueprint<TBlueprint>(string, string) Creates a new blueprint. Fields are initialized using Default values. public static TBlueprint Blueprint<TBlueprint>(string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters assetId string Asset ID for the new blueprint (Kingmaker.Blueprints.SimpleBlueprint.AssetGuid). name string Blueprint name (Kingmaker.Blueprints.SimpleBlueprint.name). Returns TBlueprint New blueprint. Type Parameters TBlueprint Blueprint type. Component<TComponent>() Creates a new component. Fields are initialized using Default value. public static TComponent Component<TComponent>() where TComponent : BlueprintComponent, new() Returns TComponent New component. Type Parameters TComponent Component type."
  },
  "api/MicroWrath.Constructors.Construct.html": {
    "href": "api/MicroWrath.Constructors.Construct.html",
    "title": "Class Construct | MicroWrath",
    "keywords": "Class Construct Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal static class Construct Inheritance object Construct Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/MicroWrath.Constructors.IReflectionInitializer.html": {
    "href": "api/MicroWrath.Constructors.IReflectionInitializer.html",
    "title": "Interface IReflectionInitializer | MicroWrath",
    "keywords": "Interface IReflectionInitializer Namespace MicroWrath.Constructors Assembly MicroWrath.dll internal interface IReflectionInitializer Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties ForType Type ForType { get; } Property Value Type"
  },
  "api/MicroWrath.Constructors.ReflectionInitializer-1.html": {
    "href": "api/MicroWrath.Constructors.ReflectionInitializer-1.html",
    "title": "Class ReflectionInitializer<T> | MicroWrath",
    "keywords": "Class ReflectionInitializer<T> Namespace MicroWrath.Constructors Assembly MicroWrath.dll Construct's reflection-based fallback for when source generated initializers are not present. internal class ReflectionInitializer<T> : IReflectionInitializer Type Parameters T Inheritance object ReflectionInitializer<T> Implements IReflectionInitializer Derived BlueprintReflectionInitializer<TBlueprint> ComponentReflectionInitializer<TComponent> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ReflectionInitializer(Type) internal ReflectionInitializer(Type defaultInitializersType) Parameters defaultInitializersType Type Fields FieldInitializers protected Action<T>[] FieldInitializers Field Value Action<T>[] PropertyInitializers protected readonly Action<T>[] PropertyInitializers Field Value Action<T>[] TypeInitializerMethod protected readonly Func<T, T> TypeInitializerMethod Field Value Func<T, T> defaults protected readonly Type defaults Field Value Type Properties ForType public Type ForType { get; } Property Value Type Methods GetDefaultMemberValueGetter(Type) protected Option<Func<object>> GetDefaultMemberValueGetter(Type memberType) Parameters memberType Type Returns Option<Func<object>> GetFieldInitializers() protected IEnumerable<Action<T>> GetFieldInitializers() Returns IEnumerable<Action<T>> GetPropertyInitializers() protected IEnumerable<Action<T>> GetPropertyInitializers() Returns IEnumerable<Action<T>> GetTypeInitializerMethods() protected Func<T, T> GetTypeInitializerMethods() Returns Func<T, T> Initialize(T) public virtual T Initialize(T obj) Parameters obj T Returns T"
  },
  "api/MicroWrath.Constructors.html": {
    "href": "api/MicroWrath.Constructors.html",
    "title": "Namespace MicroWrath.Constructors | MicroWrath",
    "keywords": "Namespace MicroWrath.Constructors Classes BlueprintReflectionInitializer<TBlueprint> ComponentReflectionInitializer<TComponent> Construct Construct.New Blueprint/Component constructors using Default. ReflectionInitializer<T> Construct's reflection-based fallback for when source generated initializers are not present. Interfaces Construct.IBlueprintConstructor<TBlueprint> Construct.IComponentConstructor<TComponent> IReflectionInitializer"
  },
  "api/MicroWrath.Default.html": {
    "href": "api/MicroWrath.Default.html",
    "title": "Class Default | MicroWrath",
    "keywords": "Class Default Namespace MicroWrath Assembly MicroWrath.dll Default values for common blueprint/componenet field types. internal static class Default Inheritance object Default Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ActionList public static ActionList ActionList { get; } Property Value ActionList CharacterSelection public static CharacterSelection CharacterSelection { get; } Property Value CharacterSelection ConditionsChecker public static ConditionsChecker ConditionsChecker { get; } Property Value ConditionsChecker ContextDiceValue public static ContextDiceValue ContextDiceValue { get; } Property Value ContextDiceValue ContextDurationValue public static ContextDurationValue ContextDurationValue { get; } Property Value ContextDurationValue ContextValue public static ContextValue ContextValue { get; } Property Value ContextValue CueSelection public static CueSelection CueSelection { get; } Property Value CueSelection DamageDescription public static DamageDescription DamageDescription { get; } Property Value DamageDescription DamageTypeDescription public static DamageTypeDescription DamageTypeDescription { get; } Property Value DamageTypeDescription DialogSpeaker public static DialogSpeaker DialogSpeaker { get; } Property Value DialogSpeaker LocalizedString public static LocalizedString LocalizedString { get; } Property Value LocalizedString PrefabLink public static PrefabLink PrefabLink { get; } Property Value PrefabLink ShowCheck public static ShowCheck ShowCheck { get; } Property Value ShowCheck VisualTransitionSettings public static Polymorph.VisualTransitionSettings VisualTransitionSettings { get; } Property Value Polymorph.VisualTransitionSettings Methods IsClassFeature(BlueprintFeature) public static BlueprintFeature IsClassFeature(BlueprintFeature feature) Parameters feature BlueprintFeature Returns BlueprintFeature IsClassFeature(BlueprintBuff) public static BlueprintBuff IsClassFeature(BlueprintBuff buff) Parameters buff BlueprintBuff Returns BlueprintBuff Name(Element) public static Element Name(Element element) Parameters element Element Returns Element"
  },
  "api/MicroWrath.Deferred.Deferred-1.html": {
    "href": "api/MicroWrath.Deferred.Deferred-1.html",
    "title": "Class Deferred<A> | MicroWrath",
    "keywords": "Class Deferred<A> Namespace MicroWrath.Deferred Assembly MicroWrath.dll internal class Deferred<A> : IDeferred<A>, IObserver<Unit> Type Parameters A Inheritance object Deferred<A> Implements IDeferred<A> IObserver<Unit> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Deferred.Bind<A, B>(IDeferred<A>, Func<A, IDeferred<B>>) Deferred.Combine<A, B>(IDeferred<A>, IDeferred<B>) Deferred.Combine<TContext, TBlueprint>(IDeferred<TContext>, OwlcatBlueprint<TBlueprint>) Deferred.Combine<TContext, TMicroBlueprint, TBlueprint>(IDeferred<TContext>, TMicroBlueprint) Deferred.Ignore<_>(IDeferred<_>) Deferred.Map<A, B>(IDeferred<A>, Func<A, B>) DeferredBlueprint.Bind<A, TBlueprint>(IDeferred<A>, Func<A, IDeferredBlueprint<TBlueprint>>, BlueprintGuid) Constructors Deferred(Func<A>) public Deferred(Func<A> getValue) Parameters getValue Func<A> Fields value private readonly Lazy<A> value Field Value Lazy<A> Properties OnEvaluated public IObservable<A> OnEvaluated { get; } Property Value IObservable<A> Methods Eval() public A Eval() Returns A OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. public void OnCompleted() OnError(Exception) Notifies the observer that the provider has experienced an error condition. public void OnError(Exception error) Parameters error Exception An object that provides additional information about the error. OnNext(Unit) Provides the observer with new data. public void OnNext(Unit value) Parameters value Unit The current notification information."
  },
  "api/MicroWrath.Deferred.Deferred.html": {
    "href": "api/MicroWrath.Deferred.Deferred.html",
    "title": "Class Deferred | MicroWrath",
    "keywords": "Class Deferred Namespace MicroWrath.Deferred Assembly MicroWrath.dll internal static class Deferred Inheritance object Deferred Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Empty public static readonly IDeferred<Unit> Empty Field Value IDeferred<Unit> Methods Apply2<A, B, C>(IDeferred<Func<A, B, C>>, IDeferred<A>, IDeferred<B>) public static IDeferred<C> Apply2<A, B, C>(this IDeferred<Func<A, B, C>> cf, IDeferred<A> ca, IDeferred<B> cb) Parameters cf IDeferred<Func<A, B, C>> ca IDeferred<A> cb IDeferred<B> Returns IDeferred<C> Type Parameters A B C Apply<A, B>(IDeferred<Func<A, B>>, IDeferred<A>) public static IDeferred<B> Apply<A, B>(this IDeferred<Func<A, B>> cf, IDeferred<A> ca) Parameters cf IDeferred<Func<A, B>> ca IDeferred<A> Returns IDeferred<B> Type Parameters A B BindOption<A, B>(IDeferred<Option<A>>, Func<A, IDeferred<B>>) public static IDeferred<Option<B>> BindOption<A, B>(this IDeferred<Option<A>> context, Func<A, IDeferred<B>> f) where A : notnull where B : notnull Parameters context IDeferred<Option<A>> f Func<A, IDeferred<B>> Returns IDeferred<Option<B>> Type Parameters A B Bind<A, B>(IDeferred<A>, Func<A, IDeferred<B>>) public static IDeferred<B> Bind<A, B>(this IDeferred<A> context, Func<A, IDeferred<B>> binder) Parameters context IDeferred<A> binder Func<A, IDeferred<B>> Returns IDeferred<B> Type Parameters A B CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, BlueprintGuid, string) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, BlueprintGuid guid, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> guid BlueprintGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, GeneratedGuid, string?) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, GeneratedGuid generatedGuid, string? name = null) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> generatedGuid GeneratedGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>, string, string) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint, string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint IMicroBlueprint<TBlueprint> assetId string name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>, BlueprintGuid, string) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint, BlueprintGuid guid, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint OwlcatBlueprint<TBlueprint> guid BlueprintGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>, GeneratedGuid, string?) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint, GeneratedGuid generatedGuid, string? name = null) where TBlueprint : SimpleBlueprint, new() Parameters blueprint OwlcatBlueprint<TBlueprint> generatedGuid GeneratedGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>, string, string) public static IDeferred<TBlueprint> CloneBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint, string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters blueprint OwlcatBlueprint<TBlueprint> assetId string name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint Collect<A>(IEnumerable<IDeferred<A>>) public static IDeferred<IEnumerable<A>> Collect<A>(this IEnumerable<IDeferred<A>> source) Parameters source IEnumerable<IDeferred<A>> Returns IDeferred<IEnumerable<A>> Type Parameters A Collect<A, B>(IEnumerable<IDeferred<A>>, Func<A, IEnumerable<B>>) public static IDeferred<IEnumerable<B>> Collect<A, B>(this IEnumerable<IDeferred<A>> source, Func<A, IEnumerable<B>> binder) Parameters source IEnumerable<IDeferred<A>> binder Func<A, IEnumerable<B>> Returns IDeferred<IEnumerable<B>> Type Parameters A B Combine<A, B>(IDeferred<A>, IDeferred<B>) public static IDeferred<(A, B)> Combine<A, B>(this IDeferred<A> context, IDeferred<B> other) Parameters context IDeferred<A> other IDeferred<B> Returns IDeferred<(A, B)> Type Parameters A B Combine<TContext, TBlueprint>(IDeferred<TContext>, OwlcatBlueprint<TBlueprint>) public static IDeferred<(TContext, TBlueprint)> Combine<TContext, TBlueprint>(this IDeferred<TContext> context, OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TContext> blueprint OwlcatBlueprint<TBlueprint> Returns IDeferred<(TContext, TBlueprint)> Type Parameters TContext TBlueprint Combine<TContext, TMicroBlueprint, TBlueprint>(IDeferred<TContext>, TMicroBlueprint) public static IDeferred<(TContext, TBlueprint?)> Combine<TContext, TMicroBlueprint, TBlueprint>(this IDeferred<TContext> context, TMicroBlueprint blueprint) where TMicroBlueprint : IMicroBlueprint<TBlueprint> where TBlueprint : SimpleBlueprint Parameters context IDeferred<TContext> blueprint TMicroBlueprint Returns IDeferred<(TContext, TBlueprint)> Type Parameters TContext TMicroBlueprint TBlueprint GetBlueprint<TBlueprint>(IDeferredBlueprint<TBlueprint>) public static IDeferred<TBlueprint> GetBlueprint<TBlueprint>(IDeferredBlueprint<TBlueprint> context) where TBlueprint : SimpleBlueprint Parameters context IDeferredBlueprint<TBlueprint> Returns IDeferred<TBlueprint> Type Parameters TBlueprint GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) public static IDeferred<TBlueprint?> GetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint IMicroBlueprint<TBlueprint> Returns IDeferred<TBlueprint> Type Parameters TBlueprint GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>) public static IDeferred<TBlueprint> GetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint OwlcatBlueprint<TBlueprint> Returns IDeferred<TBlueprint> Type Parameters TBlueprint Ignore<_>(IDeferred<_>) public static IDeferred<Unit> Ignore<_>(this IDeferred<_> context) Parameters context IDeferred<_> Returns IDeferred<Unit> Type Parameters _ Lift2<A, B, C>(Func<A, B, C>) public static Func<IDeferred<A>, IDeferred<B>, IDeferred<C>> Lift2<A, B, C>(Func<A, B, C> f) Parameters f Func<A, B, C> Returns Func<IDeferred<A>, IDeferred<B>, IDeferred<C>> Type Parameters A B C Lift<A, B>(Func<A, B>) public static Func<IDeferred<A>, IDeferred<B>> Lift<A, B>(Func<A, B> f) Parameters f Func<A, B> Returns Func<IDeferred<A>, IDeferred<B>> Type Parameters A B MapOption<A, B>(IDeferred<Option<A>>, Func<A, B>) public static IDeferred<Option<B>> MapOption<A, B>(this IDeferred<Option<A>> context, Func<A, B> f) where A : notnull where B : notnull Parameters context IDeferred<Option<A>> f Func<A, B> Returns IDeferred<Option<B>> Type Parameters A B Map<A, B>(IDeferred<A>, Func<A, B>) public static IDeferred<B> Map<A, B>(this IDeferred<A> context, Func<A, B> map) Parameters context IDeferred<A> map Func<A, B> Returns IDeferred<B> Type Parameters A B NewBlueprint<TBlueprint>(BlueprintGuid, string) public static IDeferred<TBlueprint> NewBlueprint<TBlueprint>(BlueprintGuid guid, string name) where TBlueprint : SimpleBlueprint, new() Parameters guid BlueprintGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint NewBlueprint<TBlueprint>(GeneratedGuid, string?) public static IDeferred<TBlueprint> NewBlueprint<TBlueprint>(GeneratedGuid generatedGuid, string? name = null) where TBlueprint : SimpleBlueprint, new() Parameters generatedGuid GeneratedGuid name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint NewBlueprint<TBlueprint>(string, string) public static IDeferred<TBlueprint> NewBlueprint<TBlueprint>(string assetId, string name) where TBlueprint : SimpleBlueprint, new() Parameters assetId string name string Returns IDeferred<TBlueprint> Type Parameters TBlueprint Return<A>(Func<A>) public static IDeferred<A> Return<A>(Func<A> get) Parameters get Func<A> Returns IDeferred<A> Type Parameters A"
  },
  "api/MicroWrath.Deferred.DeferredBlueprint-1.html": {
    "href": "api/MicroWrath.Deferred.DeferredBlueprint-1.html",
    "title": "Class DeferredBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Class DeferredBlueprint<TBlueprint> Namespace MicroWrath.Deferred Assembly MicroWrath.dll internal class DeferredBlueprint<TBlueprint> : IDeferredBlueprint<TBlueprint>, IDeferred<TBlueprint>, IObserver<Unit>, IMicroBlueprint<TBlueprint> where TBlueprint : SimpleBlueprint Type Parameters TBlueprint Inheritance object DeferredBlueprint<TBlueprint> Implements IDeferredBlueprint<TBlueprint> IDeferred<TBlueprint> IObserver<Unit> IMicroBlueprint<TBlueprint> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Deferred.Bind<A, B>(IDeferred<A>, Func<A, IDeferred<B>>) Deferred.Combine<A, B>(IDeferred<A>, IDeferred<B>) Deferred.Combine<TContext, TBlueprint>(IDeferred<TContext>, OwlcatBlueprint<TBlueprint>) Deferred.Combine<TContext, TMicroBlueprint, TBlueprint>(IDeferred<TContext>, TMicroBlueprint) Deferred.Ignore<_>(IDeferred<_>) Deferred.Map<A, B>(IDeferred<A>, Func<A, B>) DeferredBlueprint.AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) DeferredBlueprint.AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) DeferredBlueprint.AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid, IObservable<Unit>) DeferredBlueprint.AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>, IObservable<Unit>) DeferredBlueprint.Bind<A, TBlueprint>(IDeferred<A>, Func<A, IDeferredBlueprint<TBlueprint>>, BlueprintGuid) DeferredBlueprint.OnDemand<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) DeferredBlueprint.OnDemand<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Constructors DeferredBlueprint(IDeferred<TBlueprint>, BlueprintGuid) public DeferredBlueprint(IDeferred<TBlueprint> context, BlueprintGuid guid) Parameters context IDeferred<TBlueprint> guid BlueprintGuid Fields thisContext private readonly IDeferred<TBlueprint> thisContext Field Value IDeferred<TBlueprint> Properties BlueprintGuid public BlueprintGuid BlueprintGuid { get; } Property Value BlueprintGuid OnEvaluated public IObservable<TBlueprint> OnEvaluated { get; } Property Value IObservable<TBlueprint> Methods Eval() public TBlueprint Eval() Returns TBlueprint GetBlueprint() Retrieves the blueprint (Kingmaker.Blueprints.ResourcesLibrary.TryGetBlueprint(Kingmaker.Blueprints.BlueprintGuid)). Returns null if the blueprint is not present. public TBlueprint? GetBlueprint() Returns TBlueprint OnCompleted() Notifies the observer that the provider has finished sending push-based notifications. public void OnCompleted() OnError(Exception) Notifies the observer that the provider has experienced an error condition. public void OnError(Exception error) Parameters error Exception An object that provides additional information about the error. OnNext(Unit) Provides the observer with new data. public void OnNext(Unit value) Parameters value Unit The current notification information."
  },
  "api/MicroWrath.Deferred.DeferredBlueprint.html": {
    "href": "api/MicroWrath.Deferred.DeferredBlueprint.html",
    "title": "Class DeferredBlueprint | MicroWrath",
    "keywords": "Class DeferredBlueprint Namespace MicroWrath.Deferred Assembly MicroWrath.dll [HarmonyPatch] internal static class DeferredBlueprint Inheritance object DeferredBlueprint Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) public static IDeferredBlueprint<TBlueprint> AddBlueprintDeferred<TBlueprint>(this IDeferred<TBlueprint> context, BlueprintGuid guid) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> guid BlueprintGuid Returns IDeferredBlueprint<TBlueprint> Type Parameters TBlueprint AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) public static IDeferredBlueprint<TBlueprint> AddBlueprintDeferred<TBlueprint>(this IDeferred<TBlueprint> context, IMicroBlueprint<TBlueprint> microBlueprint) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> microBlueprint IMicroBlueprint<TBlueprint> Returns IDeferredBlueprint<TBlueprint> Type Parameters TBlueprint AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid, IObservable<Unit>) public static IDeferredBlueprint<TBlueprint> AddOnTrigger<TBlueprint>(this IDeferred<TBlueprint> context, BlueprintGuid guid, IObservable<Unit> trigger) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> guid BlueprintGuid trigger IObservable<Unit> Returns IDeferredBlueprint<TBlueprint> Type Parameters TBlueprint AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>, IObservable<Unit>) public static IDeferredBlueprint<TBlueprint> AddOnTrigger<TBlueprint>(this IDeferred<TBlueprint> context, IMicroBlueprint<TBlueprint> microBlueprint, IObservable<Unit> trigger) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> microBlueprint IMicroBlueprint<TBlueprint> trigger IObservable<Unit> Returns IDeferredBlueprint<TBlueprint> Type Parameters TBlueprint Bind<A, TBlueprint>(IDeferred<A>, Func<A, IDeferredBlueprint<TBlueprint>>, BlueprintGuid) public static IDeferredBlueprint<TBlueprint> Bind<A, TBlueprint>(this IDeferred<A> context, Func<A, IDeferredBlueprint<TBlueprint>> binder, BlueprintGuid guid) where TBlueprint : SimpleBlueprint Parameters context IDeferred<A> binder Func<A, IDeferredBlueprint<TBlueprint>> guid BlueprintGuid Returns IDeferredBlueprint<TBlueprint> Type Parameters A TBlueprint LoadBlueprint(BlueprintGuid) internal static SimpleBlueprint? LoadBlueprint(BlueprintGuid guid) Parameters guid BlueprintGuid Returns SimpleBlueprint LoadBlueprint(BlueprintsCache, BlueprintGuid) [HarmonyReversePatch(HarmonyReversePatchType.Original)] [HarmonyPatch(typeof(BlueprintsCache), \"Load\")] internal static SimpleBlueprint LoadBlueprint(BlueprintsCache instance, BlueprintGuid guid) Parameters instance BlueprintsCache guid BlueprintGuid Returns SimpleBlueprint OnDemand<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) public static IDeferred<TBlueprint> OnDemand<TBlueprint>(this IDeferred<TBlueprint> context, BlueprintGuid guid) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> guid BlueprintGuid Returns IDeferred<TBlueprint> Type Parameters TBlueprint OnDemand<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) public static IDeferred<TBlueprint> OnDemand<TBlueprint>(this IDeferred<TBlueprint> context, IMicroBlueprint<TBlueprint> microBlueprint) where TBlueprint : SimpleBlueprint Parameters context IDeferred<TBlueprint> microBlueprint IMicroBlueprint<TBlueprint> Returns IDeferred<TBlueprint> Type Parameters TBlueprint TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) internal static TBlueprint? TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint> microBlueprint) where TBlueprint : SimpleBlueprint Parameters microBlueprint IMicroBlueprint<TBlueprint> Returns TBlueprint Type Parameters TBlueprint TryGetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint>) internal static TBlueprint TryGetBlueprint<TBlueprint>(OwlcatBlueprint<TBlueprint> blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint OwlcatBlueprint<TBlueprint> Returns TBlueprint Type Parameters TBlueprint"
  },
  "api/MicroWrath.Deferred.IDeferred-1.html": {
    "href": "api/MicroWrath.Deferred.IDeferred-1.html",
    "title": "Interface IDeferred<A> | MicroWrath",
    "keywords": "Interface IDeferred<A> Namespace MicroWrath.Deferred Assembly MicroWrath.dll internal interface IDeferred<out A> : IObserver<Unit> Type Parameters A Inherited Members IObserver<Unit>.OnNext(Unit) IObserver<Unit>.OnError(Exception) IObserver<Unit>.OnCompleted() Extension Methods Deferred.Bind<A, B>(IDeferred<A>, Func<A, IDeferred<B>>) Deferred.Combine<A, B>(IDeferred<A>, IDeferred<B>) Deferred.Combine<TContext, TBlueprint>(IDeferred<TContext>, OwlcatBlueprint<TBlueprint>) Deferred.Combine<TContext, TMicroBlueprint, TBlueprint>(IDeferred<TContext>, TMicroBlueprint) Deferred.Ignore<_>(IDeferred<_>) Deferred.Map<A, B>(IDeferred<A>, Func<A, B>) DeferredBlueprint.Bind<A, TBlueprint>(IDeferred<A>, Func<A, IDeferredBlueprint<TBlueprint>>, BlueprintGuid) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties OnEvaluated IObservable<out A> OnEvaluated { get; } Property Value IObservable<A> Methods Eval() A Eval() Returns A"
  },
  "api/MicroWrath.Deferred.IDeferredBlueprint-1.html": {
    "href": "api/MicroWrath.Deferred.IDeferredBlueprint-1.html",
    "title": "Interface IDeferredBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Interface IDeferredBlueprint<TBlueprint> Namespace MicroWrath.Deferred Assembly MicroWrath.dll internal interface IDeferredBlueprint<out TBlueprint> : IDeferred<TBlueprint>, IObserver<Unit>, IMicroBlueprint<TBlueprint> where TBlueprint : SimpleBlueprint Type Parameters TBlueprint Inherited Members IDeferred<TBlueprint>.Eval() IDeferred<TBlueprint>.OnEvaluated IObserver<Unit>.OnNext(Unit) IObserver<Unit>.OnError(Exception) IObserver<Unit>.OnCompleted() IMicroBlueprint<TBlueprint>.BlueprintGuid IMicroBlueprint<TBlueprint>.GetBlueprint() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Deferred.Bind<A, B>(IDeferred<A>, Func<A, IDeferred<B>>) Deferred.Combine<A, B>(IDeferred<A>, IDeferred<B>) Deferred.Combine<TContext, TBlueprint>(IDeferred<TContext>, OwlcatBlueprint<TBlueprint>) Deferred.Combine<TContext, TMicroBlueprint, TBlueprint>(IDeferred<TContext>, TMicroBlueprint) Deferred.Ignore<_>(IDeferred<_>) Deferred.Map<A, B>(IDeferred<A>, Func<A, B>) DeferredBlueprint.AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) DeferredBlueprint.AddBlueprintDeferred<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) DeferredBlueprint.AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid, IObservable<Unit>) DeferredBlueprint.AddOnTrigger<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>, IObservable<Unit>) DeferredBlueprint.Bind<A, TBlueprint>(IDeferred<A>, Func<A, IDeferredBlueprint<TBlueprint>>, BlueprintGuid) DeferredBlueprint.OnDemand<TBlueprint>(IDeferred<TBlueprint>, BlueprintGuid) DeferredBlueprint.OnDemand<TBlueprint>(IDeferred<TBlueprint>, IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>)"
  },
  "api/MicroWrath.Deferred.html": {
    "href": "api/MicroWrath.Deferred.html",
    "title": "Namespace MicroWrath.Deferred | MicroWrath",
    "keywords": "Namespace MicroWrath.Deferred Classes Deferred DeferredBlueprint DeferredBlueprint<TBlueprint> Deferred<A> Interfaces IDeferredBlueprint<TBlueprint> IDeferred<A>"
  },
  "api/MicroWrath.Encyclopedia.Link.html": {
    "href": "api/MicroWrath.Encyclopedia.Link.html",
    "title": "Struct Encyclopedia.Link | MicroWrath",
    "keywords": "Struct Encyclopedia.Link Namespace MicroWrath Assembly MicroWrath.dll Link to an encyclopedia page. See: Page public readonly struct Encyclopedia.Link Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors Link(Page, string) public Link(Encyclopedia.Page page, string linkText) Parameters page Encyclopedia.Page linkText string Fields LinkText Link text public readonly string LinkText Field Value string Page Linked page public readonly Encyclopedia.Page Page Field Value Encyclopedia.Page Methods ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name."
  },
  "api/MicroWrath.Encyclopedia.Page.html": {
    "href": "api/MicroWrath.Encyclopedia.Page.html",
    "title": "Enum Encyclopedia.Page | MicroWrath",
    "keywords": "Enum Encyclopedia.Page Namespace MicroWrath Assembly MicroWrath.dll public enum Encyclopedia.Page Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields AbilityDamage = 0 Ability_Scores = 1 Abjuration = 2 Adapted_rules = 3 Alignment = 4 Armor_Check_Penalty = 5 Armor_Class = 6 Athletics = 7 Attack = 8 Attack_Of_Opportunity = 9 BAB = 10 Bonus = 11 Buffs = 12 CA_Types = 17 CMB = 26 CMD = 27 Camera = 13 Cantrips_Orisons = 14 Caster_Level = 15 Casting_Time = 16 Character_Class = 18 Character_Creation = 19 Character_Level = 20 Charge = 21 Charisma = 22 Check = 23 Class = 24 Class_Level = 25 Combat = 28 Combat_Maneuvers = 29 Combat_Modifiers = 30 Combat_Round = 31 Combat_Splash = 32 Companions = 33 Concealment = 34 Concentration = 35 Conjuration = 36 Constitution = 37 Core_rules = 38 Critical = 39 DC = 43 Damage = 40 Damage_Reduction = 41 Damage_Type = 42 Dexterity = 44 Dialogue_Skill_Checks = 45 Dice = 46 Divination = 47 Enchantment = 48 Energy_Damage = 49 Energy_Immunity = 50 Energy_Resistance = 51 Energy_Vulnerability = 52 Equip = 53 Evocation = 54 Fast_Healing = 55 Feat = 56 Flanking = 57 Flat_Footed = 58 Flat_Footed_AC = 59 Formations = 60 Free_Action = 61 Full_Round_Action = 62 HP = 67 Healing = 63 Health_and_Death = 64 Helpless = 65 Hit_Dice = 66 Illusion = 68 Incorporeal_Touch_Attack = 69 Initiative = 70 Injury_Death = 71 Inspect = 72 Intelligence = 73 Journal = 74 Knowledge_Arcana = 75 Knowledge_World = 76 Level_Up = 77 Light_Weapon = 78 Lore_Nature = 79 Lore_Religion = 80 Magic_School = 81 Map_Movement = 82 Max_Dex_Bonus = 83 MeleeAttack = 84 Mobility = 85 Moral_Choices = 86 Move_Action = 88 Movement = 87 NaturalAttack = 89 Necromancy = 90 Penalty = 91 Perception = 92 Persuasion = 93 Physical_Damage = 94 Race = 95 Range = 96 RangedAttack = 97 Reach = 98 Regeneration = 99 Rest = 100 Safe_Location = 101 Saving_Throw = 102 Saving_Throws_Results = 103 Scrolls = 104 Shooting_into_Melee = 105 Size = 106 Skills = 107 Special_Abilities = 108 Special_Attacks = 109 Special_Movement = 110 Speed = 111 Spell = 112 Spell_Descriptions = 114 Spell_Descriptor = 115 Spell_Fail_Chance = 116 Spell_Resistance = 117 Spell_Target = 118 Spells = 113 Standard_Actions = 119 Stealth = 120 Stories = 121 Strength = 122 Surprise = 123 Swift_Action = 124 Tactical_Movement = 125 Temporary_HP = 126 Terrain_Obstacles = 127 Threatened_Area = 128 TouchAttack = 129 Touch_AC = 130 Trait = 131 Transmutation = 132 Traps = 133 Trickery = 134 Trophies = 135 TwoWeapon_Fighting = 136 UnarmedAttack = 137 Use_Magic_Device = 138 Weapon_Proficiency = 139 Weapon_Range = 140 Wisdom = 141 XP = 142"
  },
  "api/MicroWrath.Encyclopedia.html": {
    "href": "api/MicroWrath.Encyclopedia.html",
    "title": "Class Encyclopedia | MicroWrath",
    "keywords": "Class Encyclopedia Namespace MicroWrath Assembly MicroWrath.dll Encyclopedia Utils public static class Encyclopedia Inheritance object Encyclopedia Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/MicroWrath.Extensions.ActionExtensions.html": {
    "href": "api/MicroWrath.Extensions.ActionExtensions.html",
    "title": "Class ActionExtensions | MicroWrath",
    "keywords": "Class ActionExtensions Namespace MicroWrath.Extensions Assembly MicroWrath.dll Extension methods for Kingmaker.ElementsSystem.ActionList internal static class ActionExtensions Inheritance object ActionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Add(ActionList, params GameAction[]) Add any number of Kingmaker.ElementsSystem.GameActions to an Kingmaker.ElementsSystem.ActionList public static ActionList Add(this ActionList aList, params GameAction[] actions) Parameters aList ActionList actions GameAction[] Returns ActionList"
  },
  "api/MicroWrath.Extensions.AddActivatableAbilityGroup.html": {
    "href": "api/MicroWrath.Extensions.AddActivatableAbilityGroup.html",
    "title": "Class AddActivatableAbilityGroup | MicroWrath",
    "keywords": "Class AddActivatableAbilityGroup Namespace MicroWrath.Extensions Assembly MicroWrath.dll internal class AddActivatableAbilityGroup : UnitFactComponentDelegate, ICanBeLogContext, IHavePrototype, IRuntimeEntityFactComponentProvider, ISubscriber Inheritance object BlueprintComponent EntityFactComponentDelegate<UnitEntityData, EmptyComponentData> UnitFactComponentDelegate<EmptyComponentData> UnitFactComponentDelegate AddActivatableAbilityGroup Implements ICanBeLogContext IHavePrototype IRuntimeEntityFactComponentProvider ISubscriber Inherited Members UnitFactComponentDelegate<EmptyComponentData>.Fact UnitFactComponentDelegate<EmptyComponentData>.Param EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.ClearData() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.GetSubscribingUnit() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.CreateRuntimeFactComponent() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnFactAttached() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnInitialize() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnActivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDeactivate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOn() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnTurnOff() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPreSave() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnPostLoad() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnApplyPostLoadFixes() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewDidAttach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnViewWillDetach() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnDispose() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.OnRecalculate() EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Runtime EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Owner EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Fact EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Context EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.Data EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.MaybeData EntityFactComponentDelegate<UnitEntityData, EmptyComponentData>.IsReapplying BlueprintComponent.m_Flags BlueprintComponent.name BlueprintComponent.m_PrototypeLink BlueprintComponent.ApplyValidation(ValidationContext, int) BlueprintComponent.Instantiate<T>(T) BlueprintComponent.OnDeserialized(StreamingContext) BlueprintComponent.ToString() BlueprintComponent.False BlueprintComponent.OwnerBlueprint BlueprintComponent.Disabled BlueprintComponent.PrototypeLink object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Group public int Group Field Value int Methods OnFactAttached() public override void OnFactAttached()"
  },
  "api/MicroWrath.Extensions.BlueprintExtensions.html": {
    "href": "api/MicroWrath.Extensions.BlueprintExtensions.html",
    "title": "Class BlueprintExtensions | MicroWrath",
    "keywords": "Class BlueprintExtensions Namespace MicroWrath.Extensions Assembly MicroWrath.dll Blueprint extension methods internal static class BlueprintExtensions Inheritance object BlueprintExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddComponent<TComponent>(BlueprintScriptableObject, Action<TComponent>?) Add a component to this bluprint, optionally providing an intialization action (Action<T>). A default initializer (see: Default) is applied first. public static TComponent AddComponent<TComponent>(this BlueprintScriptableObject blueprint, Action<TComponent>? init = null) where TComponent : BlueprintComponent, new() Parameters blueprint BlueprintScriptableObject Blueprint to add component to. init Action<TComponent> Initialization action. Returns TComponent Added component. Type Parameters TComponent Component type. AddComponent<TComponent>(BlueprintScriptableObject, Func<TComponent, TComponent>) Add component to this blueprint, providing an initialization function. A default initializer (see: Default) is applied first. public static TComponent AddComponent<TComponent>(this BlueprintScriptableObject blueprint, Func<TComponent, TComponent> init) where TComponent : BlueprintComponent, new() Parameters blueprint BlueprintScriptableObject Blueprint to add component to. init Func<TComponent, TComponent> Initialization function. Returns TComponent New component. Type Parameters TComponent Component type. AddComponent<TComponent>(BlueprintScriptableObject, TComponent) Add a component to this blueprint. public static void AddComponent<TComponent>(this BlueprintScriptableObject blueprint, TComponent component) where TComponent : BlueprintComponent Parameters blueprint BlueprintScriptableObject Blueprint to add component to. component TComponent Component to add to blueprint. Type Parameters TComponent Component type. AddComponents(BlueprintScriptableObject, params BlueprintComponent[]) Add components to this blueprint. public static IEnumerable<BlueprintComponent> AddComponents(this BlueprintScriptableObject blueprint, params BlueprintComponent[] components) Parameters blueprint BlueprintScriptableObject Blueprint to add components to. components BlueprintComponent[] Components to add. Returns IEnumerable<BlueprintComponent> Sequence of added components. AddComponents<TComponent>(BlueprintScriptableObject, IEnumerable<TComponent>) Add a sequence of components to this blueprint. public static IEnumerable<TComponent> AddComponents<TComponent>(this BlueprintScriptableObject blueprint, IEnumerable<TComponent> components) where TComponent : BlueprintComponent Parameters blueprint BlueprintScriptableObject Blueprint to add components to. components IEnumerable<TComponent> Components to add. Returns IEnumerable<TComponent> Sequence of added components. Type Parameters TComponent Component type. AddFeatures(BlueprintProgression, int, params BlueprintFeatureBase[]) Add features to a Kingmaker.Blueprints.Classes.BlueprintProgression. public static void AddFeatures(this BlueprintProgression progression, int level, params BlueprintFeatureBase[] features) Parameters progression BlueprintProgression Kingmaker.Blueprints.Classes.BlueprintProgression to add to. level int Level to add to. features BlueprintFeatureBase[] Features to add. AddFeatures(LevelEntry, params BlueprintFeatureBase[]) Add features to a Kingmaker.Blueprints.Classes.BlueprintProgression. public static LevelEntry AddFeatures(this LevelEntry levelEntry, params BlueprintFeatureBase[] features) Parameters levelEntry LevelEntry Kingmaker.Blueprints.Classes.LevelEntry to add features to. features BlueprintFeatureBase[] Features to add. Returns LevelEntry Kingmaker.Blueprints.Classes.LevelEntry from levelEntry with the added features. AddFeatures<TBlueprint>(BlueprintFeatureSelection, BlueprintReference<TBlueprint>, params BlueprintReference<TBlueprint>[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, BlueprintReference<TBlueprint> feature, params BlueprintReference<TBlueprint>[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. feature BlueprintReference<TBlueprint> First feature to add. features BlueprintReference<TBlueprint>[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, IMicroBlueprint<TBlueprint>, params IMicroBlueprint<TBlueprint>[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, IMicroBlueprint<TBlueprint> feature, params IMicroBlueprint<TBlueprint>[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. feature IMicroBlueprint<TBlueprint> First feature to add. features IMicroBlueprint<TBlueprint>[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, BlueprintReference<TBlueprint>, params BlueprintReference<TBlueprint>[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, BlueprintReference<TBlueprint> feature, params BlueprintReference<TBlueprint>[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? feature BlueprintReference<TBlueprint> First feature to add. features BlueprintReference<TBlueprint>[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, IMicroBlueprint<TBlueprint>, params IMicroBlueprint<TBlueprint>[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, IMicroBlueprint<TBlueprint> feature, params IMicroBlueprint<TBlueprint>[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? feature IMicroBlueprint<TBlueprint> First feature to add. features IMicroBlueprint<TBlueprint>[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, IEnumerable<BlueprintReference<TBlueprint>>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, IEnumerable<BlueprintReference<TBlueprint>> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? features IEnumerable<BlueprintReference<TBlueprint>> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, IEnumerable<IMicroBlueprint<TBlueprint>>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, IEnumerable<IMicroBlueprint<TBlueprint>> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? features IEnumerable<IMicroBlueprint<TBlueprint>> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, IEnumerable<TBlueprint>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, IEnumerable<TBlueprint> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? features IEnumerable<TBlueprint> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, bool, TBlueprint, params TBlueprint[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, bool allowDuplicates, TBlueprint feature, params TBlueprint[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. allowDuplicates bool Are duplicates allowed? feature TBlueprint First blueprint to add. features TBlueprint[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, IEnumerable<BlueprintReference<TBlueprint>>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, IEnumerable<BlueprintReference<TBlueprint>> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. features IEnumerable<BlueprintReference<TBlueprint>> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, IEnumerable<IMicroBlueprint<TBlueprint>>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, IEnumerable<IMicroBlueprint<TBlueprint>> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. features IEnumerable<IMicroBlueprint<TBlueprint>> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, IEnumerable<TBlueprint>) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, IEnumerable<TBlueprint> features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. features IEnumerable<TBlueprint> Features to add. Type Parameters TBlueprint Feature blueprint type. AddFeatures<TBlueprint>(BlueprintFeatureSelection, TBlueprint, params TBlueprint[]) Add features to a Kingmaker.Blueprints.Classes.Selection.BlueprintFeatureSelection. public static void AddFeatures<TBlueprint>(this BlueprintFeatureSelection selection, TBlueprint feature, params TBlueprint[] features) where TBlueprint : BlueprintFeature Parameters selection BlueprintFeatureSelection Selection to add to. feature TBlueprint First feature to add. features TBlueprint[] Features to add. Type Parameters TBlueprint Feature blueprint type. AddToSpellList(BlueprintAbility, BlueprintSpellList, int) Add a spell to a spell list. public static void AddToSpellList(this BlueprintAbility spell, BlueprintSpellList spellList, int level) Parameters spell BlueprintAbility Spell to add. spellList BlueprintSpellList Spell list to add to. level int Spell level. AddToSpellLists(BlueprintAbility) Add spell to spell lists based from existing Kingmaker.Blueprints.Classes.Spells.SpellListComponents. public static void AddToSpellLists(this BlueprintAbility spell) Parameters spell BlueprintAbility Spell to add. AddToSpellLists(BlueprintAbility, IEnumerable<(BlueprintSpellList, int)>) Add a spell to multiple spell lists. public static void AddToSpellLists(this BlueprintAbility spell, IEnumerable<(BlueprintSpellList, int)> spellLists) Parameters spell BlueprintAbility Spell to add. spellLists IEnumerable<(BlueprintSpellList, int)> Sequence of (spell list, spell level) pairs. EnsureComponent<TComponent>(BlueprintScriptableObject) Get a component or create one if it does not exist. A default initializer (see: Default) is applied to a new component. public static TComponent EnsureComponent<TComponent>(this BlueprintScriptableObject blueprint) where TComponent : BlueprintComponent, new() Parameters blueprint BlueprintScriptableObject Blueprint to get component from. Returns TComponent Existing or new component. Type Parameters TComponent Component type. RemoveComponent(BlueprintScriptableObject, BlueprintComponent) Remove a specific component from a blueprint. public static void RemoveComponent(this BlueprintScriptableObject blueprint, BlueprintComponent component) Parameters blueprint BlueprintScriptableObject Blueprint to remove component from. component BlueprintComponent Component to remove. RemoveComponents(BlueprintScriptableObject, Func<BlueprintComponent, bool>) Remove components from a blueprint matching a provided predicate. public static void RemoveComponents(this BlueprintScriptableObject blueprint, Func<BlueprintComponent, bool> predicate) Parameters blueprint BlueprintScriptableObject Blueprint to remove components from. predicate Func<BlueprintComponent, bool> Component selector predicate. SetIcon(BlueprintUnitFact, string, long) Set Kingmaker.Blueprints.Facts.BlueprintUnitFact.Icon using asset ID and file ID (Kingmaker.SharedTypes.BlueprintReferencedAssets) public static void SetIcon(this BlueprintUnitFact fact, string assetID, long fileID) Parameters fact BlueprintUnitFact Fact to set icon for. assetID string Asset ID of sprite. fileID long File ID of sprits. SetIcon(BlueprintUnitFact, Sprite) Set Kingmaker.Blueprints.Facts.BlueprintUnitFact.Icon. public static void SetIcon(this BlueprintUnitFact fact, Sprite sprite) Parameters fact BlueprintUnitFact Fact to set icon for. sprite Sprite Sprite to use as icon."
  },
  "api/MicroWrath.Extensions.ComponentExtensions.html": {
    "href": "api/MicroWrath.Extensions.ComponentExtensions.html",
    "title": "Class ComponentExtensions | MicroWrath",
    "keywords": "Class ComponentExtensions Namespace MicroWrath.Extensions Assembly MicroWrath.dll Kingmaker.Blueprints.BlueprintComponent extension methods. internal static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddActions(AbilityEffectRunAction, params GameAction[]) Add Kingmaker.ElementsSystem.GameActions to a Kingmaker.UnitLogic.Abilities.Components.AbilityEffectRunAction component's Kingmaker.UnitLogic.Abilities.Components.AbilityEffectRunAction.Actions. public static AbilityEffectRunAction AddActions(this AbilityEffectRunAction component, params GameAction[] actions) Parameters component AbilityEffectRunAction Kingmaker.UnitLogic.Abilities.Components.AbilityEffectRunAction component to add to. actions GameAction[] Kingmaker.ElementsSystem.GameActions to add. Returns AbilityEffectRunAction The modified Kingmaker.UnitLogic.Abilities.Components.AbilityEffectRunAction. AddPrerequisiteFeature(BlueprintFeature, IMicroBlueprint<BlueprintFeature>, bool, bool) Add prerequisite to feature. public static PrerequisiteFeature AddPrerequisiteFeature(this BlueprintFeature feature, IMicroBlueprint<BlueprintFeature> prerequisiteFeature, bool removeOnApply = false, bool hideInUI = false) Parameters feature BlueprintFeature Feature to add to. prerequisiteFeature IMicroBlueprint<BlueprintFeature> Prerequisite feature removeOnApply bool Also add a Kingmaker.Designers.Mechanics.Facts.RemoveFeatureOnApply component to that removes the prerequisite feature (ie. this feature replaces its prerequisite). hideInUI bool Hide this prerequisite in the UI. Returns PrerequisiteFeature The added Kingmaker.Blueprints.Classes.Prerequisites.PrerequisiteFeature."
  },
  "api/MicroWrath.Extensions.ConditionExtensions.html": {
    "href": "api/MicroWrath.Extensions.ConditionExtensions.html",
    "title": "Class ConditionExtensions | MicroWrath",
    "keywords": "Class ConditionExtensions Namespace MicroWrath.Extensions Assembly MicroWrath.dll Kingmaker.ElementsSystem.Condition extension methods. internal static class ConditionExtensions Inheritance object ConditionExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Add(ConditionsChecker, params Condition[]) Add a Kingmaker.ElementsSystem.Condition to a Kingmaker.ElementsSystem.ConditionsChecker. public static ConditionsChecker Add(this ConditionsChecker checker, params Condition[] conditions) Parameters checker ConditionsChecker Kingmaker.ElementsSystem.ConditionsChecker to add to. conditions Condition[] Kingmaker.ElementsSystem.Conditions to add. Returns ConditionsChecker Modified Kingmaker.ElementsSystem.ConditionsChecker. AddCondition(Conditional, params Condition[]) Add Kingmaker.ElementsSystem.Conditions to a Kingmaker.Designers.EventConditionActionSystem.Actions.Conditional action. public static Conditional AddCondition(this Conditional conditional, params Condition[] conditions) Parameters conditional Conditional Kingmaker.Designers.EventConditionActionSystem.Actions.Conditional action to add to. conditions Condition[] Kingmaker.ElementsSystem.Conditions to add. Returns Conditional Modified Kingmaker.Designers.EventConditionActionSystem.Actions.Conditional action. And(Condition, params Condition[]) Create an Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic condition requiring all conditions be met. public static OrAndLogic And(this Condition conditional, params Condition[] conditionals) Parameters conditional Condition First Kingmaker.ElementsSystem.Condition to add. conditionals Condition[] Additional Kingmaker.ElementsSystem.Conditions. Returns OrAndLogic Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic that checks the provided Kingmaker.ElementsSystem.Conditions. Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic.Kingmaker.ElementsSystem.ConditionsChecker.Operation = Kingmaker.ElementsSystem.Operation.And. Or(Condition, params Condition[]) Create an Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic condition requiring at least one condition be met. public static OrAndLogic Or(this Condition conditional, params Condition[] conditionals) Parameters conditional Condition First Kingmaker.ElementsSystem.Condition to add. conditionals Condition[] Additional Kingmaker.ElementsSystem.Conditions. Returns OrAndLogic Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic that checks the provided Kingmaker.ElementsSystem.Conditions. Kingmaker.Designers.EventConditionActionSystem.Conditions.OrAndLogic.Kingmaker.ElementsSystem.ConditionsChecker.Operation = Kingmaker.ElementsSystem.Operation.Or."
  },
  "api/MicroWrath.Extensions.ExtraActivatableAbilityGroup.UnitPart.html": {
    "href": "api/MicroWrath.Extensions.ExtraActivatableAbilityGroup.UnitPart.html",
    "title": "Class ExtraActivatableAbilityGroup.UnitPart | MicroWrath",
    "keywords": "Class ExtraActivatableAbilityGroup.UnitPart Namespace MicroWrath.Extensions Assembly MicroWrath.dll internal class ExtraActivatableAbilityGroup.UnitPart : OldStyleUnitPart Inheritance object EntityPart EntityPart<UnitEntityData> UnitPart OldStyleUnitPart ExtraActivatableAbilityGroup.UnitPart Inherited Members OldStyleUnitPart.Owner EntityPart<UnitEntityData>.RequiredEntityType EntityPart.AttachToEntity(EntityDataBase) EntityPart.PreSave() EntityPart.RestoreOwnerLink(EntityDataBase) EntityPart.PostLoad() EntityPart.ApplyPostLoadFixes() EntityPart.TurnOn() EntityPart.TurnOff() EntityPart.Dispose() EntityPart.ViewDidAttach() EntityPart.ViewWillDetach() EntityPart.OnDidAttachToEntity() EntityPart.OnPreSave() EntityPart.OnPostLoad() EntityPart.OnApplyPostLoadFixes() EntityPart.OnTurnOn() EntityPart.OnTurnOff() EntityPart.OnDispose() EntityPart.OnViewDidAttach() EntityPart.OnViewWillDetach() EntityPart.GetSubscribingUnit() EntityPart.Subscribe() EntityPart.Unsubscribe() EntityPart.RemoveSelf() EntityPart.IsTurnedOn EntityPart.IsSubscribedOnEventBus EntityPart.IsDisposed EntityPart.IsPostLoadExecuted EntityPart.IndexInCache object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields GroupSizeIncreases [JsonProperty] public Dictionary<uint, int> GroupSizeIncreases Field Value Dictionary<uint, int>"
  },
  "api/MicroWrath.Extensions.ExtraActivatableAbilityGroup.html": {
    "href": "api/MicroWrath.Extensions.ExtraActivatableAbilityGroup.html",
    "title": "Struct ExtraActivatableAbilityGroup | MicroWrath",
    "keywords": "Struct ExtraActivatableAbilityGroup Namespace MicroWrath.Extensions Assembly MicroWrath.dll Extends Kingmaker.UnitLogic.ActivatableAbilities.ActivatableAbilityGroup to accept new values. internal readonly struct ExtraActivatableAbilityGroup Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ExtraActivatableAbilityGroup(int, int) public ExtraActivatableAbilityGroup(int groupId, int size = 1) Parameters groupId int size int ExtraActivatableAbilityGroup(uint, int) public ExtraActivatableAbilityGroup(uint groupId, int size = 1) Parameters groupId uint size int Fields GroupId public readonly uint GroupId Field Value uint Groups Base group sizes internal static readonly Dictionary<uint, int> Groups Field Value Dictionary<uint, int> Properties EnumValues private static IEnumerable<ActivatableAbilityGroup> EnumValues { get; } Property Value IEnumerable<ActivatableAbilityGroup> Methods Add(uint, int) public static void Add(uint groupId, int size) Parameters groupId uint size int CheckEnumValues(uint) private static void CheckEnumValues(uint groupId) Parameters groupId uint Operators implicit operator ActivatableAbilityGroup(ExtraActivatableAbilityGroup) public static implicit operator ActivatableAbilityGroup(ExtraActivatableAbilityGroup extraGroup) Parameters extraGroup ExtraActivatableAbilityGroup Returns ActivatableAbilityGroup"
  },
  "api/MicroWrath.Extensions.html": {
    "href": "api/MicroWrath.Extensions.html",
    "title": "Namespace MicroWrath.Extensions | MicroWrath",
    "keywords": "Namespace MicroWrath.Extensions Classes ActionExtensions Extension methods for Kingmaker.ElementsSystem.ActionList AddActivatableAbilityGroup BlueprintExtensions Blueprint extension methods ComponentExtensions Kingmaker.Blueprints.BlueprintComponent extension methods. ConditionExtensions Kingmaker.ElementsSystem.Condition extension methods. ExtraActivatableAbilityGroup.UnitPart Structs ExtraActivatableAbilityGroup Extends Kingmaker.UnitLogic.ActivatableAbilities.ActivatableAbilityGroup to accept new values."
  },
  "api/MicroWrath.GeneratedGuid.html": {
    "href": "api/MicroWrath.GeneratedGuid.html",
    "title": "Class GeneratedGuid | MicroWrath",
    "keywords": "Class GeneratedGuid Namespace MicroWrath Assembly MicroWrath.dll A source-generated named guid. internal class GeneratedGuid Inheritance object GeneratedGuid Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors GeneratedGuid(string, BlueprintGuid) internal GeneratedGuid(string key, BlueprintGuid guid) Parameters key string guid BlueprintGuid Fields guids private static readonly Dictionary<string, Guid> guids Field Value Dictionary<string, Guid> Properties Guid This guid value. public BlueprintGuid Guid { get; } Property Value BlueprintGuid Key Unique name for this guid. public string Key { get; } Property Value string Keys Collection of unique names. internal static IEnumerable<string> Keys { get; } Property Value IEnumerable<string> Methods Get(string) public static GeneratedGuid Get(string key) Parameters key string Returns GeneratedGuid ToBlueprintReference<TRef>() Creates a blueprint reference of type TRef from this guid. public TRef ToBlueprintReference<TRef>() where TRef : BlueprintReferenceBase, new() Returns TRef Type Parameters TRef ToMicroBlueprint<TBlueprint>() Creates a IMicroBlueprint<TBlueprint> from this guid. public IMicroBlueprint<TBlueprint> ToMicroBlueprint<TBlueprint>() where TBlueprint : SimpleBlueprint Returns IMicroBlueprint<TBlueprint> Type Parameters TBlueprint ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. TryLoadRuntimeGuids() Used to generate guids.json (to persist the values) internal static bool TryLoadRuntimeGuids() Returns bool TrySaveRuntimeGuids() Used at runtime to save generated guids from names that are not compile-time constant. internal static bool TrySaveRuntimeGuids() Returns bool Operators implicit operator BlueprintGuid(GeneratedGuid) Implicit conversion to Kingmaker.Blueprints.BlueprintGuid public static implicit operator BlueprintGuid(GeneratedGuid guid) Parameters guid GeneratedGuid Returns BlueprintGuid"
  },
  "api/MicroWrath.ILocalizedStringData.html": {
    "href": "api/MicroWrath.ILocalizedStringData.html",
    "title": "Interface ILocalizedStringData | MicroWrath",
    "keywords": "Interface ILocalizedStringData Namespace MicroWrath Assembly MicroWrath.dll Localized string metadata public interface ILocalizedStringData Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties Key Localized string key string? Key { get; } Property Value string Locale Localized string locale Locale Locale { get; } Property Value Locale Name String name in generated LocalizedStrings class string? Name { get; } Property Value string"
  },
  "api/MicroWrath.IMicroBlueprint-1.html": {
    "href": "api/MicroWrath.IMicroBlueprint-1.html",
    "title": "Interface IMicroBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Interface IMicroBlueprint<TBlueprint> Namespace MicroWrath Assembly MicroWrath.dll Reference to a blueprint. This blueprint may not exist for the current initialization state. public interface IMicroBlueprint<out TBlueprint> where TBlueprint : SimpleBlueprint Type Parameters TBlueprint Blueprint type Extension Methods MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties BlueprintGuid BlueprintGuid BlueprintGuid { get; } Property Value BlueprintGuid Methods GetBlueprint() Retrieves the blueprint (Kingmaker.Blueprints.ResourcesLibrary.TryGetBlueprint(Kingmaker.Blueprints.BlueprintGuid)). Returns null if the blueprint is not present. TBlueprint? GetBlueprint() Returns TBlueprint"
  },
  "api/MicroWrath.InitAttribute.html": {
    "href": "api/MicroWrath.InitAttribute.html",
    "title": "Class InitAttribute | MicroWrath",
    "keywords": "Class InitAttribute Namespace MicroWrath Assembly MicroWrath.dll Run this static void method on mod init. Note: Runs before harmony patches are applied. [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] internal sealed class InitAttribute : Attribute, _Attribute Inheritance object Attribute InitAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Priority public readonly int Priority Field Value int"
  },
  "api/MicroWrath.Localization.LocalizedStringAttribute.html": {
    "href": "api/MicroWrath.Localization.LocalizedStringAttribute.html",
    "title": "Class LocalizedStringAttribute | MicroWrath",
    "keywords": "Class LocalizedStringAttribute Namespace MicroWrath.Localization Assembly MicroWrath.dll This string should should be treated as a Kingmaker.Localization.LocalizedString [AttributeUsage(AttributeTargets.Property|AttributeTargets.Field, AllowMultiple = true)] internal sealed class LocalizedStringAttribute : Attribute, _Attribute, ILocalizedStringData Inheritance object Attribute LocalizedStringAttribute Implements _Attribute ILocalizedStringData Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors LocalizedStringAttribute() public LocalizedStringAttribute() Properties Key Kingmaker.Localization.LocalizedString.Key for this string. public string? Key { get; set; } Property Value string Locale Kingmaker.Localization.Shared.Locale for this string. public Locale Locale { get; set; } Property Value Locale Name Name for this string. public string? Name { get; set; } Property Value string"
  },
  "api/MicroWrath.Localization.html": {
    "href": "api/MicroWrath.Localization.html",
    "title": "Namespace MicroWrath.Localization | MicroWrath",
    "keywords": "Namespace MicroWrath.Localization Classes LocalizedStringAttribute This string should should be treated as a Kingmaker.Localization.LocalizedString"
  },
  "api/MicroWrath.MicroBlueprint-1.html": {
    "href": "api/MicroWrath.MicroBlueprint-1.html",
    "title": "Struct MicroBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Struct MicroBlueprint<TBlueprint> Namespace MicroWrath Assembly MicroWrath.dll A safe(r) wrapper/proxy for Kingmaker.Blueprints.BlueprintReference<T> internal readonly record struct MicroBlueprint<TBlueprint> : IMicroBlueprint<TBlueprint>, IEquatable<MicroBlueprint<TBlueprint>> where TBlueprint : SimpleBlueprint Type Parameters TBlueprint Implements IMicroBlueprint<TBlueprint> IEquatable<MicroBlueprint<TBlueprint>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors MicroBlueprint(BlueprintGuid) public MicroBlueprint(BlueprintGuid guid) Parameters guid BlueprintGuid MicroBlueprint(string) public MicroBlueprint(string assetId) Parameters assetId string Fields AssetId public readonly string AssetId Field Value string Properties BlueprintGuid Guid for this blueprint public BlueprintGuid BlueprintGuid { get; } Property Value BlueprintGuid Name Blueprint name or Kingmaker.Blueprints.BlueprintReference<T>.NameSafe() if it is not loaded. public string Name { get; } Property Value string Methods GetBlueprint() Retrieves the blueprint (Kingmaker.Blueprints.ResourcesLibrary.TryGetBlueprint(Kingmaker.Blueprints.BlueprintGuid)). Returns null if the blueprint is not present. public TBlueprint? GetBlueprint() Returns TBlueprint ToReference<TReference>() Create a TReference from this object. public TReference ToReference<TReference>() where TReference : BlueprintReference<TBlueprint>, new() Returns TReference Type Parameters TReference ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Operators implicit operator MicroBlueprint<TBlueprint>(BlueprintReference<TBlueprint>) Implicit conversion from Kingmaker.Blueprints.BlueprintReference<T> public static implicit operator MicroBlueprint<TBlueprint>(BlueprintReference<TBlueprint> blueprintReference) Parameters blueprintReference BlueprintReference<TBlueprint> Returns MicroBlueprint<TBlueprint>"
  },
  "api/MicroWrath.MicroBlueprint.html": {
    "href": "api/MicroWrath.MicroBlueprint.html",
    "title": "Class MicroBlueprint | MicroWrath",
    "keywords": "Class MicroBlueprint Namespace MicroWrath Assembly MicroWrath.dll Extensions for IMicroBlueprint<TBlueprint> internal static class MicroBlueprint Inheritance object MicroBlueprint Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToMicroBlueprint<TBlueprint>(BlueprintReference<TBlueprint>) public static IMicroBlueprint<TBlueprint> ToMicroBlueprint<TBlueprint>(this BlueprintReference<TBlueprint> reference) where TBlueprint : SimpleBlueprint Parameters reference BlueprintReference<TBlueprint> Returns IMicroBlueprint<TBlueprint> Type Parameters TBlueprint ToMicroBlueprint<TBlueprint>(TBlueprint) public static IMicroBlueprint<TBlueprint> ToMicroBlueprint<TBlueprint>(this TBlueprint blueprint) where TBlueprint : SimpleBlueprint Parameters blueprint TBlueprint Returns IMicroBlueprint<TBlueprint> Type Parameters TBlueprint"
  },
  "api/MicroWrath.MicroBlueprintExtensions.html": {
    "href": "api/MicroWrath.MicroBlueprintExtensions.html",
    "title": "Class MicroBlueprintExtensions | MicroWrath",
    "keywords": "Class MicroBlueprintExtensions Namespace MicroWrath Assembly MicroWrath.dll Extension methods for IMicroBlueprint<TBlueprint> public static class MicroBlueprintExtensions Inheritance object MicroBlueprintExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) Converts to TReference public static TReference ToReference<TBlueprint, TReference>(this IMicroBlueprint<TBlueprint> bpRef) where TBlueprint : SimpleBlueprint where TReference : BlueprintReference<TBlueprint>, new() Parameters bpRef IMicroBlueprint<TBlueprint> Returns TReference Type Parameters TBlueprint TReference TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) public static Option<TBlueprint> TryGetBlueprint<TBlueprint>(this IMicroBlueprint<TBlueprint> bpRef) where TBlueprint : SimpleBlueprint Parameters bpRef IMicroBlueprint<TBlueprint> Returns Option<TBlueprint> Some(T) if blueprint is not null. Otherwise, None Type Parameters TBlueprint"
  },
  "api/MicroWrath.MicroLogger.Entry.html": {
    "href": "api/MicroWrath.MicroLogger.Entry.html",
    "title": "Struct MicroLogger.Entry | MicroWrath",
    "keywords": "Struct MicroLogger.Entry Namespace MicroWrath Assembly MicroWrath.dll internal readonly record struct MicroLogger.Entry : IEquatable<MicroLogger.Entry> Implements IEquatable<MicroLogger.Entry> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors Entry(Func<string>, Severity, Exception?) public Entry(Func<string> Message, MicroLogger.Severity Severity = Severity.Info, Exception? Exception = null) Parameters Message Func<string> Severity MicroLogger.Severity Exception Exception Properties Blueprint internal IMicroBlueprint<SimpleBlueprint>? Blueprint { get; init; } Property Value IMicroBlueprint<SimpleBlueprint> Exception public Exception? Exception { get; init; } Property Value Exception Message public Func<string> Message { get; init; } Property Value Func<string> Severity public MicroLogger.Severity Severity { get; init; } Property Value MicroLogger.Severity"
  },
  "api/MicroWrath.MicroLogger.Severity.html": {
    "href": "api/MicroWrath.MicroLogger.Severity.html",
    "title": "Enum MicroLogger.Severity | MicroWrath",
    "keywords": "Enum MicroLogger.Severity Namespace MicroWrath Assembly MicroWrath.dll internal enum MicroLogger.Severity Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields Critical = 3 Debug = -1 Error = 2 Info = 0 Warning = 1"
  },
  "api/MicroWrath.MicroLogger.html": {
    "href": "api/MicroWrath.MicroLogger.html",
    "title": "Class MicroLogger | MicroWrath",
    "keywords": "Class MicroLogger Namespace MicroWrath Assembly MicroWrath.dll Log wrapper for UMM or Owlcat logger. internal static class MicroLogger Inheritance object MicroLogger Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields Entries public static IEnumerable<MicroLogger.Entry> Entries Field Value IEnumerable<MicroLogger.Entry> Properties LogLevel Gets or sets the log severity level public static MicroLogger.Severity LogLevel { get; set; } Property Value MicroLogger.Severity ModEntry For UMM mods. Returns UnityModManagerNet.UnityModManager.ModEntry or null if this is not a UMM mod. public static UnityModManager.ModEntry? ModEntry { get; set; } Property Value UnityModManager.ModEntry OwlcatModification For OwlMods. Returns OwlcatModification or null if this is not an OwlMod. public static OwlcatModification? OwlcatModification { get; set; } Property Value OwlcatModification Methods AddEntry(Entry) Adds an entry to the log. public static void AddEntry(MicroLogger.Entry entry) Parameters entry MicroLogger.Entry Clear() Clears log entries. public static void Clear() Critical(string, Exception?) Create a new log entry of Critical severity with an optional associated exception. public static void Critical(string message, Exception? exception = null) Parameters message string Log message. exception Exception Associated exception. Debug(Action<StringBuilder>, Exception?) Create a new log entry of Debug severity using a pooled StringBuilder with an optional associated exception. public static void Debug(Action<StringBuilder> messageBuilder, Exception? exception = null) Parameters messageBuilder Action<StringBuilder> Message builder function. exception Exception Associated exception. Debug(Func<string>, IMicroBlueprint<SimpleBlueprint>?, Exception?) Create a new log entry of Debug severity with an associated blueprint and optional exception. Takes a Func<TResult> for message generation to limit performance impact when Logger severity is greater than Debug public static void Debug(Func<string> message, IMicroBlueprint<SimpleBlueprint>? blueprint, Exception? exception = null) Parameters message Func<string> Log message. blueprint IMicroBlueprint<SimpleBlueprint> Associated blueprint. exception Exception Associated exception. Debug(Func<string>, Exception?) Create a new log entry of Debug severity with an optional associated exception. Takes a Func<TResult> for message generation to limit performance impact when Logger severity is greater than Debug public static void Debug(Func<string> message, Exception? exception = null) Parameters message Func<string> Log message. exception Exception Associated exception. Error(string, Exception?) Create a new log entry of Error severity with an optional associated exception. public static void Error(string message, Exception? exception = null) Parameters message string Log message. exception Exception Associated exception. Log(string, Exception?) Create a new log entry of Info severity with an optional associated exception. public static void Log(string message, Exception? exception = null) Parameters message string Log message. exception Exception Associated exception. ReplayLogOwlcat() Replays the log. Used to log message from before the logger is initialized. public static void ReplayLogOwlcat() ReplayLogUmm() Replays the log. Used to log message from before the logger is initialized. public static void ReplayLogUmm() SetLogLevel(Severity) Sets the minimum log severity. Events with lower severity will not be printed to the log. public static void SetLogLevel(MicroLogger.Severity severity) Parameters severity MicroLogger.Severity Warning(string, Exception?) Create a new log entry of Warning severity with an optional associated exception. public static void Warning(string message, Exception? exception = null) Parameters message string Log message. exception Exception Associated exception."
  },
  "api/MicroWrath.OwlcatBlueprint-1.html": {
    "href": "api/MicroWrath.OwlcatBlueprint-1.html",
    "title": "Struct OwlcatBlueprint<TBlueprint> | MicroWrath",
    "keywords": "Struct OwlcatBlueprint<TBlueprint> Namespace MicroWrath Assembly MicroWrath.dll internal readonly record struct OwlcatBlueprint<TBlueprint> : IMicroBlueprint<TBlueprint>, IEquatable<OwlcatBlueprint<TBlueprint>> where TBlueprint : SimpleBlueprint Type Parameters TBlueprint Implements IMicroBlueprint<TBlueprint> IEquatable<OwlcatBlueprint<TBlueprint>> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods MicroBlueprintExtensions.ToReference<TBlueprint, TReference>(IMicroBlueprint<TBlueprint>) MicroBlueprintExtensions.TryGetBlueprint<TBlueprint>(IMicroBlueprint<TBlueprint>) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors OwlcatBlueprint(string) public OwlcatBlueprint(string guidString) Parameters guidString string Properties Blueprint Get this blueprint. This should only return null if Kingmaker.Blueprints.JsonSystem.BlueprintsCache.Init() has not yet run. public TBlueprint Blueprint { get; } Property Value TBlueprint Referenced blueprint BlueprintGuid Guid for this blueprint public BlueprintGuid BlueprintGuid { get; init; } Property Value BlueprintGuid Name Blueprint name or Kingmaker.Blueprints.BlueprintReference<T>.NameSafe() if it is not loaded. public string Name { get; } Property Value string Methods GetOriginalBlueprint() Fetches the original blueprint from the blueprints pack with no patches applied by any mod (including this one) public TBlueprint GetOriginalBlueprint() Returns TBlueprint The original blueprint ToReference<TReference>() Create a TReference from this object. public TReference ToReference<TReference>() where TReference : BlueprintReference<TBlueprint>, new() Returns TReference Type Parameters TReference ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Explicit Interface Implementations IMicroBlueprint<TBlueprint>.GetBlueprint() Retrieves the blueprint (Kingmaker.Blueprints.ResourcesLibrary.TryGetBlueprint(Kingmaker.Blueprints.BlueprintGuid)). Returns null if the blueprint is not present. TBlueprint? IMicroBlueprint<TBlueprint>.GetBlueprint() Returns TBlueprint"
  },
  "api/MicroWrath.Triggers.html": {
    "href": "api/MicroWrath.Triggers.html",
    "title": "Class Triggers | MicroWrath",
    "keywords": "Class Triggers Namespace MicroWrath Assembly MicroWrath.dll A set of useful IObservable<T> events. [HarmonyPatch] internal static class Triggers Inheritance object Triggers Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields BlueprintLoad_Prefix Immediately before Kingmaker.Blueprints.JsonSystem.BlueprintsCache.Load(Kingmaker.Blueprints.BlueprintGuid) runs. Provided Kingmaker.Blueprints.BlueprintGuid parameter is the requested blueprint's Kingmaker.Blueprints.SimpleBlueprint.AssetGuid. public static readonly IObservable<BlueprintGuid> BlueprintLoad_Prefix Field Value IObservable<BlueprintGuid> BlueprintsCache_Init Kingmaker.Blueprints.JsonSystem.BlueprintsCache.Init() was run. public static readonly IObservable<Unit> BlueprintsCache_Init Field Value IObservable<Unit> BlueprintsCache_Init_Early Kingmaker.Blueprints.JsonSystem.BlueprintsCache.Init() was run. Runs before BlueprintsCache_Init. public static readonly IObservable<Unit> BlueprintsCache_Init_Early Field Value IObservable<Unit> BlueprintsCache_Init_Prefix Immediately before Kingmaker.Blueprints.JsonSystem.BlueprintsCache.Init(). public static readonly IObservable<Unit> BlueprintsCache_Init_Prefix Field Value IObservable<Unit> LocaleChanged Kingmaker.Localization.LocalizationManager.OnLocaleChanged() was run. public static readonly IObservable<Locale> LocaleChanged Field Value IObservable<Locale> LocalizationManager_Init_Postfix Kingmaker.Localization.LocalizationManager.Init() was run. public static readonly IObservable<Unit> LocalizationManager_Init_Postfix Field Value IObservable<Unit> Events LocalizationManager_OnLocaleChangedEvent private static event Action<Locale> LocalizationManager_OnLocaleChangedEvent Event Type Action<Locale>"
  },
  "api/MicroWrath.Util.AlignmentExtensions.html": {
    "href": "api/MicroWrath.Util.AlignmentExtensions.html",
    "title": "Class AlignmentExtensions | MicroWrath",
    "keywords": "Class AlignmentExtensions Namespace MicroWrath.Util Assembly MicroWrath.dll Character alignment extension methods public static class AlignmentExtensions Inheritance object AlignmentExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods IsChaotic(Alignment) public static bool IsChaotic(this Alignment alignment) Parameters alignment Alignment Returns bool True if alignment contains Kingmaker.Enums.AlignmentComponent.Chaotic IsEvil(Alignment) public static bool IsEvil(this Alignment alignment) Parameters alignment Alignment Returns bool True if alignment contains Kingmaker.Enums.AlignmentComponent.Evil IsGood(Alignment) public static bool IsGood(this Alignment alignment) Parameters alignment Alignment Returns bool True if alignment contains Kingmaker.Enums.AlignmentComponent.Good IsLawful(Alignment) public static bool IsLawful(this Alignment alignment) Parameters alignment Alignment Returns bool True if alignment contains Kingmaker.Enums.AlignmentComponent.Lawful ToAlignment(IEnumerable<AlignmentComponent>) Creates a single Kingmaker.Enums.Alignment value from a collection of Kingmaker.Enums.AlignmentComponent values public static Alignment ToAlignment(this IEnumerable<AlignmentComponent> components) Parameters components IEnumerable<AlignmentComponent> Returns Alignment ToComponents(Alignment) public static IEnumerable<AlignmentComponent> ToComponents(this Alignment alignment) Parameters alignment Alignment Returns IEnumerable<AlignmentComponent> Collection of Kingmaker.Enums.AlignmentComponent values from a provided Kingmaker.Enums.Alignment value ToDamageAlignment(AlignmentComponent) public static DamageAlignment ToDamageAlignment(this AlignmentComponent alignmentComponent) Parameters alignmentComponent AlignmentComponent Returns DamageAlignment Equivalent Kingmaker.Enums.Damage.DamageAlignment from provided Kingmaker.Enums.AlignmentComponent value ToDamageAlignments(Alignment) public static IEnumerable<DamageAlignment> ToDamageAlignments(this Alignment alignment) Parameters alignment Alignment Returns IEnumerable<DamageAlignment> Collection of Kingmaker.Enums.Damage.DamageAlignment values from an Kingmaker.Enums.Alignment value"
  },
  "api/MicroWrath.Util.AssetUtils.AlphaBlendConfig.html": {
    "href": "api/MicroWrath.Util.AssetUtils.AlphaBlendConfig.html",
    "title": "Struct AssetUtils.AlphaBlendConfig | MicroWrath",
    "keywords": "Struct AssetUtils.AlphaBlendConfig Namespace MicroWrath.Util Assembly MicroWrath.dll private struct AssetUtils.AlphaBlendConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields foregroundRect public Rect foregroundRect Field Value Rect x public float x Field Value float y public float y Field Value float"
  },
  "api/MicroWrath.Util.AssetUtils.DiagonalCutConfig.html": {
    "href": "api/MicroWrath.Util.AssetUtils.DiagonalCutConfig.html",
    "title": "Struct AssetUtils.DiagonalCutConfig | MicroWrath",
    "keywords": "Struct AssetUtils.DiagonalCutConfig Namespace MicroWrath.Util Assembly MicroWrath.dll private struct AssetUtils.DiagonalCutConfig Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Fields height public float height Field Value float invertX public float invertX Field Value float invertY public float invertY Field Value float offset public float offset Field Value float width public float width Field Value float"
  },
  "api/MicroWrath.Util.AssetUtils.Direct.html": {
    "href": "api/MicroWrath.Util.AssetUtils.Direct.html",
    "title": "Class AssetUtils.Direct | MicroWrath",
    "keywords": "Class AssetUtils.Direct Namespace MicroWrath.Util Assembly MicroWrath.dll Direct referenced assets (BlueprintReferencedAssets) public static class AssetUtils.Direct Inheritance object AssetUtils.Direct Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetSprite(string, long) Gets a blueprint sprite public static Sprite GetSprite(string assetId, long fileId) Parameters assetId string fileId long Returns Sprite"
  },
  "api/MicroWrath.Util.AssetUtils.html": {
    "href": "api/MicroWrath.Util.AssetUtils.html",
    "title": "Class AssetUtils | MicroWrath",
    "keywords": "Class AssetUtils Namespace MicroWrath.Util Assembly MicroWrath.dll Mod asset utility functions public static class AssetUtils Inheritance object AssetUtils Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AlphaBlend(Texture2D, Texture2D, Vector2, Rect, TextureFormat, bool, RenderTextureFormat, FilterMode) Alpha blend textures. Uses a compute shader to not make bubbles sad public static Texture2D AlphaBlend(Texture2D background, Texture2D foreground, Vector2 position = default, Rect foregroundRect = default, TextureFormat format = TextureFormat.RGBA32, bool mips = false, RenderTextureFormat renderFormat = RenderTextureFormat.Default, FilterMode filterMode = FilterMode.Point) Parameters background Texture2D Background texture. foreground Texture2D Foreground texture. position Vector2 Coordinates of the foreground texture on the background. foregroundRect Rect Subset of foreground texture. Clamped to background dimensions. Default: Use full foreground. format TextureFormat Output texture format. mips bool Autogenerate mip maps for output texture. renderFormat RenderTextureFormat RenderTexture format. filterMode FilterMode Output texture filter mode. Returns Texture2D New texture containing blended textures. CloneBlueprint<TBlueprint>(TBlueprint, BlueprintGuid, string?, bool) Clones a blueprint public static TBlueprint CloneBlueprint<TBlueprint>(TBlueprint blueprint, BlueprintGuid guid, string? name = null, bool addToLibrary = true) where TBlueprint : SimpleBlueprint Parameters blueprint TBlueprint Blueprint to clone guid BlueprintGuid New blueprint's guid name string New blueprint's name addToLibrary bool Add to library immediately Returns TBlueprint Blueprint clone Type Parameters TBlueprint Blueprint type CreateSprite(Texture2D, Rect?, Vector2?) Creates a sprite from a texture public static Sprite CreateSprite(Texture2D texture, Rect? rect = null, Vector2? pivot = null) Parameters texture Texture2D rect Rect? pivot Vector2? Returns Sprite DiagonalCutBlend(Texture2D, Texture2D, float, bool, bool, int, int, TextureFormat, bool, RenderTextureFormat, FilterMode) Diagonal cut blend two textures with compute shader. public static Texture2D DiagonalCutBlend(Texture2D textureA, Texture2D textureB, float offset = 0, bool invertX = false, bool invertY = false, int width = 0, int height = 0, TextureFormat format = TextureFormat.RGBA32, bool mips = false, RenderTextureFormat renderFormat = RenderTextureFormat.Default, FilterMode filterMode = FilterMode.Point) Parameters textureA Texture2D The first texture. textureB Texture2D The second texture. offset float Cut start X offset. invertX bool Invert cut along X axis. invertY bool Invert cut along Y axis. width int Output width. Default is the smaller of two input textures. height int Output height. Default is the smaller of two input textures. format TextureFormat Output texture format. mips bool Autogenerate mip maps for output texture. renderFormat RenderTextureFormat RenderTexture format. filterMode FilterMode Output texture filter mode. Returns Texture2D GetSpriteAssemblyResource(Assembly, string, Rect?, Vector2?) Equivalent to GetSpriteAssemblyResource(Assembly, string, Rect?, Vector2?) and CreateSprite(Texture2D, Rect?, Vector2?) public static Sprite? GetSpriteAssemblyResource(Assembly ass, string name, Rect? rect = null, Vector2? pivot = null) Parameters ass Assembly name string rect Rect? pivot Vector2? Returns Sprite GetTextureAssemblyResource(Assembly, string, TextureFormat, bool) Generates a texture from a bitmap (eg. PNG) assembly resource public static Texture2D? GetTextureAssemblyResource(Assembly ass, string name, TextureFormat format = TextureFormat.RGBA32, bool mipChain = false) Parameters ass Assembly Assembly name string Asset file path (in project directory structure) format TextureFormat Texture format mipChain bool Generate mip chain (see Texture2D(int, int, TextureFormat, bool) constructor) Returns Texture2D New texture object"
  },
  "api/MicroWrath.Util.Assets.Dynamic.DynamicAssetLink-2.html": {
    "href": "api/MicroWrath.Util.Assets.Dynamic.DynamicAssetLink-2.html",
    "title": "Class Dynamic.DynamicAssetLink<T, TLink> | MicroWrath",
    "keywords": "Class Dynamic.DynamicAssetLink<T, TLink> Namespace MicroWrath.Util.Assets Assembly MicroWrath.dll private abstract class Dynamic.DynamicAssetLink<T, TLink> : Dynamic.IDynamicAssetLink where T : Object where TLink : WeakResourceLink<T>, new() Type Parameters T TLink Inheritance object Dynamic.DynamicAssetLink<T, TLink> Implements Dynamic.IDynamicAssetLink Derived Dynamic.DynamicGameObjectLink<TLink> Dynamic.DynamicMonobehaviourLink<T, TLink> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors DynamicAssetLink(TLink, Func<T, T>) public DynamicAssetLink(TLink assetLink, Func<T, T> init) Parameters assetLink TLink init Func<T, T> Properties AssetType public virtual Type AssetType { get; } Property Value Type Init public virtual Func<T, T> Init { get; } Property Value Func<T, T> Link public virtual TLink Link { get; } Property Value TLink LinkType public virtual Type LinkType { get; } Property Value Type Methods CloneObject(T) protected abstract T CloneObject(T obj) Parameters obj T Returns T CreateObject() public virtual Object CreateObject() Returns Object Explicit Interface Implementations IDynamicAssetLink.Init Func<Object, Object> Dynamic.IDynamicAssetLink.Init { get; } Returns Func<Object, Object> IDynamicAssetLink.Link WeakResourceLink Dynamic.IDynamicAssetLink.Link { get; } Returns WeakResourceLink"
  },
  "api/MicroWrath.Util.Assets.Dynamic.DynamicGameObjectLink-1.html": {
    "href": "api/MicroWrath.Util.Assets.Dynamic.DynamicGameObjectLink-1.html",
    "title": "Class Dynamic.DynamicGameObjectLink<TLink> | MicroWrath",
    "keywords": "Class Dynamic.DynamicGameObjectLink<TLink> Namespace MicroWrath.Util.Assets Assembly MicroWrath.dll private class Dynamic.DynamicGameObjectLink<TLink> : Dynamic.DynamicAssetLink<GameObject, TLink>, Dynamic.IDynamicAssetLink where TLink : WeakResourceLink<GameObject>, new() Type Parameters TLink Inheritance object Dynamic.DynamicAssetLink<GameObject, TLink> Dynamic.DynamicGameObjectLink<TLink> Implements Dynamic.IDynamicAssetLink Inherited Members Dynamic.DynamicAssetLink<GameObject, TLink>.AssetType Dynamic.DynamicAssetLink<GameObject, TLink>.LinkType Dynamic.DynamicAssetLink<GameObject, TLink>.Link Dynamic.DynamicAssetLink<GameObject, TLink>.Dynamic.IDynamicAssetLink.Link Dynamic.DynamicAssetLink<GameObject, TLink>.Init Dynamic.DynamicAssetLink<GameObject, TLink>.Dynamic.IDynamicAssetLink.Init Dynamic.DynamicAssetLink<GameObject, TLink>.CloneObject(GameObject) Dynamic.DynamicAssetLink<GameObject, TLink>.CreateObject() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors DynamicGameObjectLink(TLink, Func<GameObject, GameObject>) public DynamicGameObjectLink(TLink link, Func<GameObject, GameObject> init) Parameters link TLink init Func<GameObject, GameObject> Methods CloneObject(GameObject) protected override GameObject CloneObject(GameObject obj) Parameters obj GameObject Returns GameObject"
  },
  "api/MicroWrath.Util.Assets.Dynamic.DynamicMonobehaviourLink-2.html": {
    "href": "api/MicroWrath.Util.Assets.Dynamic.DynamicMonobehaviourLink-2.html",
    "title": "Class Dynamic.DynamicMonobehaviourLink<T, TLink> | MicroWrath",
    "keywords": "Class Dynamic.DynamicMonobehaviourLink<T, TLink> Namespace MicroWrath.Util.Assets Assembly MicroWrath.dll private class Dynamic.DynamicMonobehaviourLink<T, TLink> : Dynamic.DynamicAssetLink<T, TLink>, Dynamic.IDynamicAssetLink where T : MonoBehaviour where TLink : WeakResourceLink<T>, new() Type Parameters T TLink Inheritance object Dynamic.DynamicAssetLink<T, TLink> Dynamic.DynamicMonobehaviourLink<T, TLink> Implements Dynamic.IDynamicAssetLink Inherited Members Dynamic.DynamicAssetLink<T, TLink>.AssetType Dynamic.DynamicAssetLink<T, TLink>.LinkType Dynamic.DynamicAssetLink<T, TLink>.Link Dynamic.DynamicAssetLink<T, TLink>.Dynamic.IDynamicAssetLink.Link Dynamic.DynamicAssetLink<T, TLink>.Init Dynamic.DynamicAssetLink<T, TLink>.Dynamic.IDynamicAssetLink.Init Dynamic.DynamicAssetLink<T, TLink>.CloneObject(T) Dynamic.DynamicAssetLink<T, TLink>.CreateObject() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors DynamicMonobehaviourLink(TLink, Func<T, T>) public DynamicMonobehaviourLink(TLink link, Func<T, T> init) Parameters link TLink init Func<T, T> Methods CloneObject(T) protected override T CloneObject(T obj) Parameters obj T Returns T"
  },
  "api/MicroWrath.Util.Assets.Dynamic.IDynamicAssetLink.html": {
    "href": "api/MicroWrath.Util.Assets.Dynamic.IDynamicAssetLink.html",
    "title": "Interface Dynamic.IDynamicAssetLink | MicroWrath",
    "keywords": "Interface Dynamic.IDynamicAssetLink Namespace MicroWrath.Util.Assets Assembly MicroWrath.dll private interface Dynamic.IDynamicAssetLink Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Properties AssetType Type AssetType { get; } Property Value Type Init Func<Object, Object> Init { get; } Property Value Func<Object, Object> Link WeakResourceLink Link { get; } Property Value WeakResourceLink LinkType Type LinkType { get; } Property Value Type Methods CreateObject() Object CreateObject() Returns Object"
  },
  "api/MicroWrath.Util.Assets.Dynamic.html": {
    "href": "api/MicroWrath.Util.Assets.Dynamic.html",
    "title": "Class Dynamic | MicroWrath",
    "keywords": "Class Dynamic Namespace MicroWrath.Util.Assets Assembly MicroWrath.dll internal static class Dynamic Inheritance object Dynamic Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Creates a dynamic proxy for a MonoBehaviour WeakResourceLink. This is for assets that are components rather than GameObjects. public static TLink CreateDynamicMonobehaviourProxy<T, TLink>(this TLink link, Action<T> init, string? assetId = null) where T : MonoBehaviour where TLink : WeakResourceLink<T>, new() Parameters link TLink A TLinklink init Action<T> Initialization function to be executed on asset load. assetId string Asset ID for the new link. Will be set to a new guid if absent or null. Returns TLink Type Parameters T Asset Type. TLink AssetLink Type. CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Creates a dynamic proxy for a MonoBehaviour WeakResourceLink. This is for assets that are components rather than GameObjects. public static TLink CreateDynamicMonobehaviourProxy<T, TLink>(this TLink link, Func<T, T> init, string? assetId = null) where T : MonoBehaviour where TLink : WeakResourceLink<T>, new() Parameters link TLink A TLinklink init Func<T, T> Initialization function to be executed on asset load. assetId string Asset ID for the new link. Will be set to a new guid if absent or null. Returns TLink Type Parameters T Asset Type. TLink AssetLink Type. CreateDynamicProxy<TLink>(TLink, Action<GameObject>, string?) Creates a dynamic proxy for a Kingmaker.ResourceLinks.WeakResourceLink<T> (eg. PrefabLink) public static TLink CreateDynamicProxy<TLink>(this TLink link, Action<GameObject> init, string? assetId = null) where TLink : WeakResourceLink<GameObject>, new() Parameters link TLink A TLink link. init Action<GameObject> Initialization function to be executed on asset load. assetId string Asset ID for the new link. Will be set to a new guid if absent or null. Returns TLink Type Parameters TLink CreateDynamicProxy<TLink>(TLink, Func<GameObject, GameObject>, string?) Creates a dynamic proxy for a Kingmaker.ResourceLinks.WeakResourceLink<T> (eg. PrefabLink) public static TLink CreateDynamicProxy<TLink>(this TLink link, Func<GameObject, GameObject> init, string? assetId = null) where TLink : WeakResourceLink<GameObject>, new() Parameters link TLink A TLink link. init Func<GameObject, GameObject> Initialization function to be executed on asset load. assetId string Asset ID for the new link. Will be set to a new guid if absent or null. Returns TLink Type Parameters TLink"
  },
  "api/MicroWrath.Util.Assets.html": {
    "href": "api/MicroWrath.Util.Assets.html",
    "title": "Namespace MicroWrath.Util.Assets | MicroWrath",
    "keywords": "Namespace MicroWrath.Util.Assets Classes Dynamic"
  },
  "api/MicroWrath.Util.Functional.html": {
    "href": "api/MicroWrath.Util.Functional.html",
    "title": "Class Functional | MicroWrath",
    "keywords": "Class Functional Namespace MicroWrath.Util Assembly MicroWrath.dll Functional utilities public static class Functional Inheritance object Functional Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Apply<T, U>(T, Func<T, U>) public static U Apply<T, U>(this T obj, Func<T, U> f) Parameters obj T f Func<T, U> Returns U Type Parameters T U Curry<A, B, C>(Func<A, B, C>) public static Func<A, Func<B, C>> Curry<A, B, C>(this Func<A, B, C> func) Parameters func Func<A, B, C> Returns Func<A, Func<B, C>> Type Parameters A B C Curry<A, B, C, D>(Func<A, B, C, D>) public static Func<A, B, Func<C, D>> Curry<A, B, C, D>(this Func<A, B, C, D> func) Parameters func Func<A, B, C, D> Returns Func<A, B, Func<C, D>> Type Parameters A B C D Curry<A, B, C, D, E>(Func<A, B, C, D, E>) public static Func<A, B, C, Func<D, E>> Curry<A, B, C, D, E>(this Func<A, B, C, D, E> func) Parameters func Func<A, B, C, D, E> Returns Func<A, B, C, Func<D, E>> Type Parameters A B C D E Curry<A, B, C, D, E, F>(Func<A, B, C, D, E, F>) public static Func<A, B, C, D, Func<E, F>> Curry<A, B, C, D, E, F>(this Func<A, B, C, D, E, F> func) Parameters func Func<A, B, C, D, E, F> Returns Func<A, B, C, D, Func<E, F>> Type Parameters A B C D E F Curry<A, B, C, D, E, F, G>(Func<A, B, C, D, E, F, G>) public static Func<A, B, C, D, E, Func<F, G>> Curry<A, B, C, D, E, F, G>(this Func<A, B, C, D, E, F, G> func) Parameters func Func<A, B, C, D, E, F, G> Returns Func<A, B, C, D, E, Func<F, G>> Type Parameters A B C D E F G Curry<A, B, C, D, E, F, G, H>(Func<A, B, C, D, E, F, G, H>) public static Func<A, B, C, D, E, F, Func<G, H>> Curry<A, B, C, D, E, F, G, H>(this Func<A, B, C, D, E, F, G, H> func) Parameters func Func<A, B, C, D, E, F, G, H> Returns Func<A, B, C, D, E, F, Func<G, H>> Type Parameters A B C D E F G H Downcast<T, U>(T) public static U Downcast<T, U>(this T obj) where U : T Parameters obj T Returns U Type Parameters T U Expand3<A, B, C>(((A, B), C)) private static (A, B, C) Expand3<A, B, C>(((A, B), C) tuple) Parameters tuple ((A, B), C) Returns (A, B, C) Type Parameters A B C Expand4<A, B, C, D>((((A, B), C), D)) private static (A, B, C, D) Expand4<A, B, C, D>((((A, B), C), D) tuple) Parameters tuple (((A, B), C), D) Returns (A, B, C, D) Type Parameters A B C D Expand5<A, B, C, D, E>(((((A, B), C), D), E)) private static (A, B, C, D, E) Expand5<A, B, C, D, E>(((((A, B), C), D), E) tuple) Parameters tuple ((((A, B), C), D), E) Returns (A, B, C, D, E) Type Parameters A B C D E Expand6<A, B, C, D, E, F>((((((A, B), C), D), E), F)) private static (A, B, C, D, E, F) Expand6<A, B, C, D, E, F>((((((A, B), C), D), E), F) tuple) Parameters tuple (((((A, B), C), D), E), F) Returns (A, B, C, D, E, F) Type Parameters A B C D E F Expand7<A, B, C, D, E, F, G>(((((((A, B), C), D), E), F), G)) private static (A, B, C, D, E, F, G) Expand7<A, B, C, D, E, F, G>(((((((A, B), C), D), E), F), G) tuple) Parameters tuple ((((((A, B), C), D), E), F), G) Returns (A, B, C, D, E, F, G) Type Parameters A B C D E F G Expand8<A, B, C, D, E, F, G, H>((((((((A, B), C), D), E), F), G), H)) private static (A, B, C, D, E, F, G, H) Expand8<A, B, C, D, E, F, G, H>((((((((A, B), C), D), E), F), G), H) tuple) Parameters tuple (((((((A, B), C), D), E), F), G), H) Returns (A, B, C, D, E, F, G, H) Type Parameters A B C D E F G H Expand<A, B, C>(((A, B), C)) Flattens a tuple public static (A, B, C) Expand<A, B, C>(this ((A, B), C) tuple) Parameters tuple ((A, B), C) Returns (A, B, C) Type Parameters A B C Expand<A, B, C, D>((((A, B), C), D)) Flattens a tuple public static (A, B, C, D) Expand<A, B, C, D>(this (((A, B), C), D) tuple) Parameters tuple (((A, B), C), D) Returns (A, B, C, D) Type Parameters A B C D Expand<A, B, C, D, E>(((((A, B), C), D), E)) Flattens a tuple public static (A, B, C, D, E) Expand<A, B, C, D, E>(this ((((A, B), C), D), E) tuple) Parameters tuple ((((A, B), C), D), E) Returns (A, B, C, D, E) Type Parameters A B C D E Expand<A, B, C, D, E, F>((((((A, B), C), D), E), F)) Flattens a tuple public static (A, B, C, D, E, F) Expand<A, B, C, D, E, F>(this (((((A, B), C), D), E), F) tuple) Parameters tuple (((((A, B), C), D), E), F) Returns (A, B, C, D, E, F) Type Parameters A B C D E F Expand<A, B, C, D, E, F, G>(((((((A, B), C), D), E), F), G)) Flattens a tuple public static (A, B, C, D, E, F, G) Expand<A, B, C, D, E, F, G>(this ((((((A, B), C), D), E), F), G) tuple) Parameters tuple ((((((A, B), C), D), E), F), G) Returns (A, B, C, D, E, F, G) Type Parameters A B C D E F G Expand<A, B, C, D, E, F, G, H>((((((((A, B), C), D), E), F), G), H)) Flattens a tuple public static (A, B, C, D, E, F, G, H) Expand<A, B, C, D, E, F, G, H>(this (((((((A, B), C), D), E), F), G), H) tuple) Parameters tuple (((((((A, B), C), D), E), F), G), H) Returns (A, B, C, D, E, F, G, H) Type Parameters A B C D E F G H Flatten<A, B, C>(((A, B), C)) Flattens a tuple public static (A, B, C) Flatten<A, B, C>(this ((A, B), C) tuple) Parameters tuple ((A, B), C) Returns (A, B, C) Type Parameters A B C Flatten<A, B, C>((A, (B, C))) Flattens a tuple public static (A, B, C) Flatten<A, B, C>(this (A, (B, C)) tuple) Parameters tuple (A, (B, C)) Returns (A, B, C) Type Parameters A B C Flatten<A, B, C, D>((((A, B), C), D)) Flattens a tuple public static (A, B, C, D) Flatten<A, B, C, D>(this (((A, B), C), D) tuple) Parameters tuple (((A, B), C), D) Returns (A, B, C, D) Type Parameters A B C D Flatten<A, B, C, D>(((A, B), C, D)) Flattens a tuple public static (A, B, C, D) Flatten<A, B, C, D>(this ((A, B), C, D) tuple) Parameters tuple ((A, B), C, D) Returns (A, B, C, D) Type Parameters A B C D Flatten<A, B, C, D>((A, (B, (C, D)))) Flattens a tuple public static (A, B, C, D) Flatten<A, B, C, D>(this (A, (B, (C, D))) tuple) Parameters tuple (A, (B, (C, D))) Returns (A, B, C, D) Type Parameters A B C D Flatten<A, B, C, D>((A, (B, C), D)) Flattens a tuple public static (A, B, C, D) Flatten<A, B, C, D>(this (A, (B, C), D) tuple) Parameters tuple (A, (B, C), D) Returns (A, B, C, D) Type Parameters A B C D Flatten<A, B, C, D>((A, B, (C, D))) Flattens a tuple public static (A, B, C, D) Flatten<A, B, C, D>(this (A, B, (C, D)) tuple) Parameters tuple (A, B, (C, D)) Returns (A, B, C, D) Type Parameters A B C D Flatten<A, B, C, D, E>(((((A, B), C), D), E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this ((((A, B), C), D), E) tuple) Parameters tuple ((((A, B), C), D), E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((((A, B), C), (D, E))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (((A, B), C), (D, E)) tuple) Parameters tuple (((A, B), C), (D, E)) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((((A, B), C), D, E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (((A, B), C), D, E) tuple) Parameters tuple (((A, B), C), D, E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>(((A, B), (C, (D, E)))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this ((A, B), (C, (D, E))) tuple) Parameters tuple ((A, B), (C, (D, E))) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>(((A, B), (C, D), E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this ((A, B), (C, D), E) tuple) Parameters tuple ((A, B), (C, D), E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>(((A, B), C, (D, E))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this ((A, B), C, (D, E)) tuple) Parameters tuple ((A, B), C, (D, E)) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>(((A, B), C, D, E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this ((A, B), C, D, E) tuple) Parameters tuple ((A, B), C, D, E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, (B, (C, (D, E))))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, (B, (C, (D, E)))) tuple) Parameters tuple (A, (B, (C, (D, E)))) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, (B, C), (D, E))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, (B, C), (D, E)) tuple) Parameters tuple (A, (B, C), (D, E)) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, (B, C), D, E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, (B, C), D, E) tuple) Parameters tuple (A, (B, C), D, E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, B, (C, (D, E)))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, B, (C, (D, E))) tuple) Parameters tuple (A, B, (C, (D, E))) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, B, (C, D), E)) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, B, (C, D), E) tuple) Parameters tuple (A, B, (C, D), E) Returns (A, B, C, D, E) Type Parameters A B C D E Flatten<A, B, C, D, E>((A, B, C, (D, E))) Flattens a tuple public static (A, B, C, D, E) Flatten<A, B, C, D, E>(this (A, B, C, (D, E)) tuple) Parameters tuple (A, B, C, (D, E)) Returns (A, B, C, D, E) Type Parameters A B C D E Identity<T>(T) public static T Identity<T>(T x) Parameters x T Returns T Type Parameters T Ignore<T>(T) public static void Ignore<T>(T _) Parameters _ T Type Parameters T PartialApply<A, B, C>(Func<A, B, C>, A) public static Func<B, C> PartialApply<A, B, C>(Func<A, B, C> f, A a) Parameters f Func<A, B, C> a A Returns Func<B, C> Type Parameters A B C PartialApply<A, B, C, D>(Func<A, B, C, D>, A) public static Func<B, C, D> PartialApply<A, B, C, D>(Func<A, B, C, D> f, A a) Parameters f Func<A, B, C, D> a A Returns Func<B, C, D> Type Parameters A B C D PartialApply<A, B, C, D, E>(Func<A, B, C, D, E>, A) public static Func<B, C, D, E> PartialApply<A, B, C, D, E>(Func<A, B, C, D, E> f, A a) Parameters f Func<A, B, C, D, E> a A Returns Func<B, C, D, E> Type Parameters A B C D E PartialApply<A, B, C, D, E, F>(Func<A, B, C, D, E, F>, A) public static Func<B, C, D, E, F> PartialApply<A, B, C, D, E, F>(Func<A, B, C, D, E, F> f, A a) Parameters f Func<A, B, C, D, E, F> a A Returns Func<B, C, D, E, F> Type Parameters A B C D E F PartialApply<A, B, C, D, E, F, G>(Func<A, B, C, D, E, F, G>, A) public static Func<B, C, D, E, F, G> PartialApply<A, B, C, D, E, F, G>(Func<A, B, C, D, E, F, G> func, A a) Parameters func Func<A, B, C, D, E, F, G> a A Returns Func<B, C, D, E, F, G> Type Parameters A B C D E F G PartialApply<A, B, C, D, E, F, G, H>(Func<A, B, C, D, E, F, G, H>, A) public static Func<B, C, D, E, F, G, H> PartialApply<A, B, C, D, E, F, G, H>(Func<A, B, C, D, E, F, G, H> func, A a) Parameters func Func<A, B, C, D, E, F, G, H> a A Returns Func<B, C, D, E, F, G, H> Type Parameters A B C D E F G H ToArray<T>((((((((T, T), T), T), T), T), T), T)) Flattens a tuple public static T[] ToArray<T>(this (((((((T, T), T), T), T), T), T), T) tuple) Parameters tuple (((((((T, T), T), T), T), T), T), T) Returns T[] Type Parameters T ToArray<T>(((((((T, T), T), T), T), T), T)) Flattens a tuple public static T[] ToArray<T>(this ((((((T, T), T), T), T), T), T) tuple) Parameters tuple ((((((T, T), T), T), T), T), T) Returns T[] Type Parameters T ToArray<T>((((((T, T), T), T), T), T)) Flattens a tuple public static T[] ToArray<T>(this (((((T, T), T), T), T), T) tuple) Parameters tuple (((((T, T), T), T), T), T) Returns T[] Type Parameters T ToArray<T>(((((T, T), T), T), T)) Flattens a tuple public static T[] ToArray<T>(this ((((T, T), T), T), T) tuple) Parameters tuple ((((T, T), T), T), T) Returns T[] Type Parameters T ToArray<T>((((T, T), T), T)) Returns an array containing elements of a tuple, where all values are T. public static T[] ToArray<T>(this (((T, T), T), T) tuple) Parameters tuple (((T, T), T), T) Returns T[] Type Parameters T ToArray<T>(((T, T), T)) Flattens a tuple public static T[] ToArray<T>(this ((T, T), T) tuple) Parameters tuple ((T, T), T) Returns T[] Type Parameters T UpCast<TParam, T>(TParam) public static T UpCast<TParam, T>(TParam x) where TParam : T Parameters x TParam Returns T Type Parameters TParam T With<A, B, T>((A, B), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, T) With<A, B, T>((A, B) tuple, T item) Parameters tuple (A, B) item T Returns (A, B, T) Type Parameters A B T With<A, B, C, T>((A, B, C), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, C, T) With<A, B, C, T>((A, B, C) tuple, T item) Parameters tuple (A, B, C) item T Returns (A, B, C, T) Type Parameters A B C T With<A, B, C, D, T>((A, B, C, D), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, C, D, T) With<A, B, C, D, T>((A, B, C, D) tuple, T item) Parameters tuple (A, B, C, D) item T Returns (A, B, C, D, T) Type Parameters A B C D T With<A, B, C, D, E, T>((A, B, C, D, E), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, C, D, E, T) With<A, B, C, D, E, T>((A, B, C, D, E) tuple, T item) Parameters tuple (A, B, C, D, E) item T Returns (A, B, C, D, E, T) Type Parameters A B C D E T With<A, B, C, D, E, F, T>((A, B, C, D, E, F), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, C, D, E, F, T) With<A, B, C, D, E, F, T>((A, B, C, D, E, F) tuple, T item) Parameters tuple (A, B, C, D, E, F) item T Returns (A, B, C, D, E, F, T) Type Parameters A B C D E F T With<A, B, C, D, E, F, G, T>((A, B, C, D, E, F, G), T) Adds an element to a N-tuple, returning a N+1-tuple public static (A, B, C, D, E, F, G, T) With<A, B, C, D, E, F, G, T>((A, B, C, D, E, F, G) tuple, T item) Parameters tuple (A, B, C, D, E, F, G) item T Returns (A, B, C, D, E, F, G, T) Type Parameters A B C D E F G T"
  },
  "api/MicroWrath.Util.GuidEx.html": {
    "href": "api/MicroWrath.Util.GuidEx.html",
    "title": "Class GuidEx | MicroWrath",
    "keywords": "Class GuidEx Namespace MicroWrath.Util Assembly MicroWrath.dll GUID utils public static class GuidEx Inheritance object GuidEx Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods CreateV5(Guid, string) Create a GUID from a namespace and name according to the UUIDv5 specification (section 5.5). public static Guid CreateV5(Guid ns, string name) Parameters ns Guid UUID namespace. name string Name Returns Guid Guid conforming to UUIDv5 CreateV5(string, string) Create a GUID from a namespace and name according to the UUIDv5 specification (section 5.5), without the requirement that the ns parameter be a valid UUID. public static Guid CreateV5(string ns, string name) Parameters ns string UUID namespace. This method does not enforce UUIDv5 requirement that this parameter is a valid UUID. Use CreateV5(Guid, string) if strict UUIDv5 conformance is required. name string Name Returns Guid Determinstic Guid generated from namespace and name (may not conform to UUIDv5). CreateV8(Span<byte>) Create a GUID from the first 16 bytes of a byte array according to the UUIDv8 specification (section 5.58). public static Guid CreateV8(Span<byte> data) Parameters data Span<byte> A byte array containing at least 16 bytes Returns Guid Guid conforming to UUIDv8 Exceptions ArgumentException data is less than 16 bytes"
  },
  "api/MicroWrath.Util.Linq.EnumerableExtensions.html": {
    "href": "api/MicroWrath.Util.Linq.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | MicroWrath",
    "keywords": "Class EnumerableExtensions Namespace MicroWrath.Util.Linq Assembly MicroWrath.dll IEnumerable<T> extensions public static class EnumerableExtensions Inheritance object EnumerableExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AddRange<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) Adds the elements of the specified IDictionary<TKey, TValue> to the specified IDictionary<TKey, TValue>.s public static void AddRange<TKey, TValue>(this IDictionary<TKey, TValue> dict, IDictionary<TKey, TValue> other) Parameters dict IDictionary<TKey, TValue> other IDictionary<TKey, TValue> Type Parameters TKey TValue AppendValue<T>(IEnumerable<T>, T) Appends a value to a sequence public static IEnumerable<T> AppendValue<T>(this IEnumerable<T> source, T value) Parameters source IEnumerable<T> Source sequence value T Value to append Returns IEnumerable<T> Type Parameters T Append<T>(T[], T) Appends a value to an array public static T[] Append<T>(this T[] array, T value) Parameters array T[] The array to append to value T The value to append Returns T[] New array containing the values of the original array and the new value Type Parameters T ChunkBySize<T>(IEnumerable<T>, int) Divides input sequence into chunks of at most chunkSize public static IEnumerable<IEnumerable<T>> ChunkBySize<T>(this IEnumerable<T> source, int chunkSize) Parameters source IEnumerable<T> chunkSize int Returns IEnumerable<IEnumerable<T>> Sequence of sequences of chunkSize elements. The last chunk will contain at most chunkSize elements Type Parameters T Concat<T>(T[], T[]) Concatenates two arrays public static T[] Concat<T>(this T[] arrayA, T[] arrayB) Parameters arrayA T[] arrayB T[] Returns T[] Type Parameters T Concat<T>(T[], params T[][]) Concatenate arrays public static T[] Concat<T>(this T[] source, params T[][] arrays) Parameters source T[] Initial array arrays T[][] Arrays to append Returns T[] Concatenated array of T values Type Parameters T DistinctBy<T, U>(IEnumerable<T>, Func<T, U>) Selects distinct elements from a sequence, first applying a selector function and using the default equality comparer public static IEnumerable<T> DistinctBy<T, U>(this IEnumerable<T> seq, Func<T, U> selector) Parameters seq IEnumerable<T> selector Func<T, U> Returns IEnumerable<T> Type Parameters T U DistinctBy<T, U>(IEnumerable<T>, Func<T, U>, IEqualityComparer<U>) Selects distinct elements from a sequence, first applying a selector function and using a provided equality comparer public static IEnumerable<T> DistinctBy<T, U>(this IEnumerable<T> seq, Func<T, U> selector, IEqualityComparer<U> comparer) Parameters seq IEnumerable<T> selector Func<T, U> comparer IEqualityComparer<U> Returns IEnumerable<T> Type Parameters T U EmptyIfNull<T>(T?) Creates a sequence from a single nullable value public static IEnumerable<T> EmptyIfNull<T>(this T? item) where T : class Parameters item T Returns IEnumerable<T> Sequence containing single element item or empty sequence if item is null Type Parameters T FindSequence<T>(IEnumerable<T>, IEnumerable<Func<T, bool>>) Finds a subsequence within a larger sequence by applying a sequence of predicates public static IEnumerable<T> FindSequence<T>(this IEnumerable<T> source, IEnumerable<Func<T, bool>> predicateSequence) Parameters source IEnumerable<T> Source sequence predicateSequence IEnumerable<Func<T, bool>> Sequence of match predicates Returns IEnumerable<T> Matched sequence if found or empty sequence Type Parameters T FindSequence<T>(IEnumerable<T>, int, IEnumerable<Func<T, bool>>) Finds a subsequence within a larger sequence by applying a sequence of predicates, providing a maximum match length public static IEnumerable<T> FindSequence<T>(this IEnumerable<T> source, int length, IEnumerable<Func<T, bool>> predicateSequence) Parameters source IEnumerable<T> Source sequence length int Number of elements to match predicateSequence IEnumerable<Func<T, bool>> Sequence of match predicates Returns IEnumerable<T> Matched sequence if found or empty sequence Type Parameters T FindSequence<T>(IEnumerable<T>, int, Func<IEnumerable<T>, bool>) Finds a subsequence within a larger sequence by applying a predicate on a subsequences public static IEnumerable<T> FindSequence<T>(this IEnumerable<T> source, int length, Func<IEnumerable<T>, bool> predicate) Parameters source IEnumerable<T> Source sequence length int Number of elements to match predicate Func<IEnumerable<T>, bool> Subsequence predicate Returns IEnumerable<T> Matched sequence if found or empty sequence Type Parameters T Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Generates a sequence using a provided generator function. This function is not eagerly evaluated and therefore the resulting sequence length is unbounded public static IEnumerable<T> Generate<TSource, T>(this TSource state, Func<TSource, Option<(T, TSource)>> generator) Parameters state TSource Initial (seed) state generator Func<TSource, Option<(T, TSource)>> Generator function Returns IEnumerable<T> Generated sequence Type Parameters TSource Source type T Output element type Indexed<T>(IEnumerable<T>) Add item index to sequence public static IEnumerable<(int index, T item)> Indexed<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Source sequence Returns IEnumerable<(int index, T item)> Sequence of index/item pairs Type Parameters T Element type NotNull<T>(IEnumerable<T?>) Returns non-null elements of a sequence of reference type public static IEnumerable<T> NotNull<T>(this IEnumerable<T?> source) where T : class Parameters source IEnumerable<T> Returns IEnumerable<T> Type Parameters T Singleton<T>(T) Sequence containing exactly one item public static IEnumerable<T> Singleton<T>(T value) Parameters value T Returns IEnumerable<T> Type Parameters T SkipIfNull<T>(IEnumerable<T?>) Skips null values in a sequence public static IEnumerable<T> SkipIfNull<T>(this IEnumerable<T?> source) where T : class Parameters source IEnumerable<T> Source sequence Returns IEnumerable<T> Source sequence, skipping null values, if the source sequence is empty or only contains null values, returns an empty sequence Type Parameters T Element (nullable) reference type ToDictionary<TKey, TValue>(IEnumerable<(TKey key, TValue value)>) Creates a dictionary from a sequence of Key/Value pairs public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<(TKey key, TValue value)> source) Parameters source IEnumerable<(TKey key, TValue value)> Source sequence Returns IDictionary<TKey, TValue> Type Parameters TKey Key type TValue Value type ToDictionary<TKey, TValue>(IEnumerable<(TKey key, TValue value)>, IEqualityComparer<TKey>) Creates a dictionary from a sequence of Key/Value pairs using a provided IEqualityComparer<T> public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<(TKey key, TValue value)> source, IEqualityComparer<TKey> keyComparer) Parameters source IEnumerable<(TKey key, TValue value)> Source sequence keyComparer IEqualityComparer<TKey> Key equality comparer Returns IDictionary<TKey, TValue> Type Parameters TKey TValue"
  },
  "api/MicroWrath.Util.Linq.html": {
    "href": "api/MicroWrath.Util.Linq.html",
    "title": "Namespace MicroWrath.Util.Linq | MicroWrath",
    "keywords": "Namespace MicroWrath.Util.Linq Classes EnumerableExtensions IEnumerable<T> extensions"
  },
  "api/MicroWrath.Util.Option-1.html": {
    "href": "api/MicroWrath.Util.Option-1.html",
    "title": "Struct Option<T> | MicroWrath",
    "keywords": "Struct Option<T> Namespace MicroWrath.Util Assembly MicroWrath.dll Struct representation of an optional value. public readonly struct Option<T> : IEquatable<Option<T>>, IEquatable<T?>, IEnumerable<T>, IEnumerable where T : notnull Type Parameters T Implements IEquatable<Option<T>> IEquatable<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.Bind<A, B>(Option<A>, Func<A, Option<B>>) Option.DefaultValue<T>(Option<T>, T) Option.Map<A, B>(Option<A>, Func<A, B>) Option.ToOption<T>(T?) EnumerableExtensions.AppendValue<T>(IEnumerable<T>, T) EnumerableExtensions.ChunkBySize<T>(IEnumerable<T>, int) EnumerableExtensions.DistinctBy<T, U>(IEnumerable<T>, Func<T, U>) EnumerableExtensions.DistinctBy<T, U>(IEnumerable<T>, Func<T, U>, IEqualityComparer<U>) EnumerableExtensions.FindSequence<T>(IEnumerable<T>, IEnumerable<Func<T, bool>>) EnumerableExtensions.FindSequence<T>(IEnumerable<T>, int, IEnumerable<Func<T, bool>>) EnumerableExtensions.FindSequence<T>(IEnumerable<T>, int, Func<IEnumerable<T>, bool>) EnumerableExtensions.Indexed<T>(IEnumerable<T>) Option.Choose<T, U>(IEnumerable<T>, Func<T, Option<U>>) Option.TryFind<T>(IEnumerable<T>, Func<T, bool>) Option.TryHead<T>(IEnumerable<T>) Constructors Option() None public Option() Fields IsSome True if Some(T) public readonly bool IsSome Field Value bool MaybeValue default if None [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore)] public readonly T MaybeValue Field Value T None Represents \"no value\". public static readonly Option<T> None Field Value Option<T> Properties IsNone True if None public bool IsNone { get; } Property Value bool Value Throws NullReferenceException if None public T Value { get; } Property Value T Methods Equals(Option<T>) Indicates whether the current object is equal to another object of the same type. public bool Equals(Option<T> other) Parameters other Option<T> An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Exceptions InvalidOperationException Attempted to compare to a null value. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. Equals(T?) Indicates whether the current object is equal to another object of the same type. public bool Equals(T? other) Parameters other T An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> An enumerator that can be used to iterate through the collection. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Some(T) Creates a new Some(T) value. public static Option<T> Some(T value) Parameters value T Returns Option<T> ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. Operators operator ==(Option<T>, Option<T>) public static bool operator ==(Option<T> a, Option<T> b) Parameters a Option<T> b Option<T> Returns bool operator ==(Option<T>, T?) public static bool operator ==(Option<T> a, T? b) Parameters a Option<T> b T Returns bool operator ==(T?, Option<T>) public static bool operator ==(T? a, Option<T> b) Parameters a T b Option<T> Returns bool operator !=(Option<T>, Option<T>) public static bool operator !=(Option<T> a, Option<T> b) Parameters a Option<T> b Option<T> Returns bool operator !=(Option<T>, T?) public static bool operator !=(Option<T> a, T? b) Parameters a Option<T> b T Returns bool operator !=(T?, Option<T>) public static bool operator !=(T? a, Option<T> b) Parameters a T b Option<T> Returns bool Explicit Interface Implementations IEnumerable.GetEnumerator() Returns an enumerator that iterates through a collection. IEnumerator IEnumerable.GetEnumerator() Returns IEnumerator An IEnumerator object that can be used to iterate through the collection."
  },
  "api/MicroWrath.Util.Option.html": {
    "href": "api/MicroWrath.Util.Option.html",
    "title": "Class Option | MicroWrath",
    "keywords": "Class Option Namespace MicroWrath.Util Assembly MicroWrath.dll Extension methods for Option<T> public static class Option Inheritance object Option Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Apply2<A, B, C>(Option<Func<A, B, C>>, Option<A>, Option<B>) public static Option<C> Apply2<A, B, C>(this Option<Func<A, B, C>> lifted, Option<A> optionA, Option<B> optionB) where A : notnull where B : notnull where C : notnull Parameters lifted Option<Func<A, B, C>> optionA Option<A> optionB Option<B> Returns Option<C> Type Parameters A B C Apply<A, B>(Option<Func<A, B>>) public static Func<Option<A>, Option<B>> Apply<A, B>(Option<Func<A, B>> lifted) where A : notnull where B : notnull Parameters lifted Option<Func<A, B>> Returns Func<Option<A>, Option<B>> Type Parameters A B Apply<A, B>(Option<Func<A, B>>, Option<A>) public static Option<B> Apply<A, B>(this Option<Func<A, B>> lifted, Option<A> option) where A : notnull where B : notnull Parameters lifted Option<Func<A, B>> option Option<A> Returns Option<B> Type Parameters A B Bind<A, B>(Option<A>, Func<A, Option<B>>) public static Option<B> Bind<A, B>(this Option<A> option, Func<A, Option<B>> binder) where A : notnull where B : notnull Parameters option Option<A> binder Func<A, Option<B>> Returns Option<B> Type Parameters A B Bind<A, B>(Func<A, Option<B>>) public static Func<Option<A>, Option<B>> Bind<A, B>(Func<A, Option<B>> binder) where A : notnull where B : notnull Parameters binder Func<A, Option<B>> Returns Func<Option<A>, Option<B>> Type Parameters A B Choose<T, U>(IEnumerable<T>, Func<T, Option<U>>) Applies function chooser to each element of the sequence and returns a sequence containing results where this function returns Some<T>(T) public static IEnumerable<U> Choose<T, U>(this IEnumerable<T> source, Func<T, Option<U>> chooser) where U : notnull Parameters source IEnumerable<T> Source sequence with elements of type T chooser Func<T, Option<U>> Function to transform elements of type T into type Option<T> Returns IEnumerable<U> Sequence of type U Type Parameters T U DefaultValue<T>(Option<T>, T) Returns the value of option or defaultValue if it is None public static T DefaultValue<T>(this Option<T> option, T defaultValue) where T : notnull Parameters option Option<T> defaultValue T Returns T The value of option or defaultValue Type Parameters T IsNone<T>(Option<T>) True if None public static bool IsNone<T>(Option<T> option) where T : notnull Parameters option Option<T> Returns bool Type Parameters T IsSome<T>(Option<T>) True if Some(T) public static bool IsSome<T>(Option<T> option) where T : notnull Parameters option Option<T> Returns bool Type Parameters T Lift<A, B>(Func<A, B>) public static Func<Option<A>, Option<B>> Lift<A, B>(Func<A, B> f) where A : notnull where B : notnull Parameters f Func<A, B> Returns Func<Option<A>, Option<B>> Type Parameters A B Map<A, B>(Option<A>, Func<A, B>) public static Option<B> Map<A, B>(this Option<A> option, Func<A, B> f) where A : notnull where B : notnull Parameters option Option<A> f Func<A, B> Returns Option<B> Type Parameters A B None<T>() Represents \"no value\". public static Option<T> None<T>() where T : notnull Returns Option<T> Type Parameters T OfObj<T>(T?) Creates an Option<T> from a nullable value of type T public static Option<T> OfObj<T>(T? obj) where T : notnull Parameters obj T Returns Option<T> Type Parameters T Return<A>(A) public static Option<A> Return<A>(A value) where A : notnull Parameters value A Returns Option<A> Type Parameters A Some<T>(T) Creates a new Some(T) value. public static Option<T> Some<T>(T value) where T : notnull Parameters value T Returns Option<T> Type Parameters T ToObj<T>(Option<T>) Converts an optional value to a value of type T or null. public static T? ToObj<T>(Option<T> option) where T : notnull Parameters option Option<T> Returns T Value of type T or null. Type Parameters T ToOption<T>(T?) Creates an Option<T> from a nullable value of type T public static Option<T> ToOption<T>(this T? obj) where T : notnull Parameters obj T Returns Option<T> Type Parameters T TryFind<T>(IEnumerable<T>, Func<T, bool>) Returns the first element of the sequence where the predicate function returns true. If no element is found, returns None public static Option<T> TryFind<T>(this IEnumerable<T> source, Func<T, bool> predicate) where T : notnull Parameters source IEnumerable<T> predicate Func<T, bool> Returns Option<T> The matching element or None Type Parameters T TryHead<T>(IEnumerable<T>) Returns the first element of the sequence or None if the sequence is empty. public static Option<T> TryHead<T>(this IEnumerable<T> source) where T : notnull Parameters source IEnumerable<T> Returns Option<T> Some(T) of the first element or None if the sequence is empty. Type Parameters T"
  },
  "api/MicroWrath.Util.TranspilerUtil.html": {
    "href": "api/MicroWrath.Util.TranspilerUtil.html",
    "title": "Class TranspilerUtil | MicroWrath",
    "keywords": "Class TranspilerUtil Namespace MicroWrath.Util Assembly MicroWrath.dll internal static class TranspilerUtil Inheritance object TranspilerUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods FindInstructionsIndexed(IEnumerable<CodeInstruction>, IEnumerable<Func<CodeInstruction, bool>>, int) Tries to locate a range of instructions matching a sequence of predicates. May return a subset (TODO: verify this) so you should check the length. public static IEnumerable<(int index, CodeInstruction instruction)> FindInstructionsIndexed(this IEnumerable<CodeInstruction> instructions, IEnumerable<Func<CodeInstruction, bool>> matchFuncs, int start = 0) Parameters instructions IEnumerable<CodeInstruction> Sequence of HarmonyLib.CodeInstructions to search. matchFuncs IEnumerable<Func<CodeInstruction, bool>> Sequence of predicates to match. start int Start index. Returns IEnumerable<(int index, CodeInstruction instruction)> ReplaceInstructions(IEnumerable<CodeInstruction>, IEnumerable<CodeInstruction>, IEnumerable<CodeInstruction>) Replaces a matched sequence of instructions. public static IEnumerable<CodeInstruction> ReplaceInstructions(IEnumerable<CodeInstruction> source, IEnumerable<CodeInstruction> match, IEnumerable<CodeInstruction> replaceWith) Parameters source IEnumerable<CodeInstruction> Sequence of HarmonyLib.CodeInstructions to search. match IEnumerable<CodeInstruction> Sequence of instructions to match (by opcode and operand). replaceWith IEnumerable<CodeInstruction> Returns IEnumerable<CodeInstruction>"
  },
  "api/MicroWrath.Util.Unity.UnityUtil.ColorHSV.html": {
    "href": "api/MicroWrath.Util.Unity.UnityUtil.ColorHSV.html",
    "title": "Struct UnityUtil.ColorHSV | MicroWrath",
    "keywords": "Struct UnityUtil.ColorHSV Namespace MicroWrath.Util.Unity Assembly MicroWrath.dll Represents a HSV color value. public readonly record struct UnityUtil.ColorHSV : IEquatable<UnityUtil.ColorHSV> Implements IEquatable<UnityUtil.ColorHSV> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ColorHSV(double, double, double) Represents a HSV color value. public ColorHSV(double h, double s, double v) Parameters h double Hue. s double Saturation. v double Value. Properties h Hue. public double h { get; init; } Property Value double s Saturation. public double s { get; init; } Property Value double v Value. public double v { get; init; } Property Value double"
  },
  "api/MicroWrath.Util.Unity.UnityUtil.Debug.html": {
    "href": "api/MicroWrath.Util.Unity.UnityUtil.Debug.html",
    "title": "Class UnityUtil.Debug | MicroWrath",
    "keywords": "Class UnityUtil.Debug Namespace MicroWrath.Util.Unity Assembly MicroWrath.dll Diagnostics. public static class UnityUtil.Debug Inheritance object UnityUtil.Debug Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods DumpGameObject(GameObject) Print the structure of an object and its children. public static string DumpGameObject(GameObject gameObject) Parameters gameObject GameObject Object to dump. Returns string String describing the object's structure."
  },
  "api/MicroWrath.Util.Unity.UnityUtil.html": {
    "href": "api/MicroWrath.Util.Unity.UnityUtil.html",
    "title": "Class UnityUtil | MicroWrath",
    "keywords": "Class UnityUtil Namespace MicroWrath.Util.Unity Assembly MicroWrath.dll internal static class UnityUtil Inheritance object UnityUtil Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods AlphaBlend(Color, Color) Apply an alpha blend to two UnityEngine.Colors. public static Color AlphaBlend(Color c1, Color c2) Parameters c1 Color First color. c2 Color Second color. Returns Color Result of an alpha blend applied to the provided colors. AlphaBlend(Color, params Color[]) Apply an alpha blend to a multiple colors. public static Color AlphaBlend(Color c, params Color[] cs) Parameters c Color First color. cs Color[] Additional colors. Returns Color Result of an alpha blend applied to the provided colors. AlphaBlend(Texture2D, Texture2D, int, int) [Obsolete(\"Use AssetUtils.AlphaBlend instead\")] public static Texture2D AlphaBlend(Texture2D t1, Texture2D t2, int x = 0, int y = 0) Parameters t1 Texture2D t2 Texture2D x int y int Returns Texture2D ChangeGradientColors(Gradient?, Func<Color, Color>) Apply a given transformation function to all colors in a UnityEngine.Gradient. public static Gradient? ChangeGradientColors(Gradient? g, Func<Color, Color> f) Parameters g Gradient Gradient to modify. f Func<Color, Color> Function to apply. Returns Gradient Modified gradient. ChangeMinMaxGradientColors(MinMaxGradient, Func<Color, Color>) Apply a given transformation function to all colors in a UnityEngine.ParticleSystem.MinMaxGradient. public static ParticleSystem.MinMaxGradient ChangeMinMaxGradientColors(ParticleSystem.MinMaxGradient mmg, Func<Color, Color> f) Parameters mmg ParticleSystem.MinMaxGradient Gradient to modify. f Func<Color, Color> Function to apply. Returns ParticleSystem.MinMaxGradient Modified gradient. CopyReadable(Texture2D, TextureFormat) Copy and convert a texture to a given format and make it accessible from the CPU. Note: Uses UnityEngine.Color32 pixel format. public static Texture2D CopyReadable(Texture2D texture, TextureFormat format = TextureFormat.RGBA32) Parameters texture Texture2D Texture to copy. format TextureFormat Texture format. Returns Texture2D Readable texture. CopyReadable<TData>(Texture2D, TextureFormat) Copy and convert a texture to a given format and make it accessible from the CPU. public static Texture2D CopyReadable<TData>(Texture2D texture, TextureFormat format = TextureFormat.RGBA32) where TData : struct Parameters texture Texture2D Texture to copy. format TextureFormat Texture format. Returns Texture2D Readable texture. Type Parameters TData Pixel data format. ModifyHSV(Color, Func<ColorHSV, ColorHSV>) Apply a transformation function to a HSV color. public static Color ModifyHSV(this Color c, Func<UnityUtil.ColorHSV, UnityUtil.ColorHSV> f) Parameters c Color HSV color value. f Func<UnityUtil.ColorHSV, UnityUtil.ColorHSV> Function to apply. Returns Color New HSV value. RotateColorHue(Color, double, bool) Rotates a UnityEngine.Color's hue. public static Color RotateColorHue(Color color, double degrees, bool debugLog = false) Parameters color Color Color to change. degrees double Hue shift in degrees. debugLog bool Log color values. Returns Color RotateHueN(float, double) Rotate Hue (as float) buy a an angle in degrees. Result is normalized to be in the range [0..1] public static float RotateHueN(float hue, double degrees) Parameters hue float Hue as float - degrees/380 or radians/pi degrees double Angle in degrees Returns float SupportsSetPixel(TextureFormat) Check whether this texture format supports setting pixel values (eg. SetPixel(int, int, Color), SetPixelData<T>(T[], int, int), SetPixel(int, int, int, Color), etc. public static bool SupportsSetPixel(this TextureFormat tFormat) Parameters tFormat TextureFormat Texture format. Returns bool true if a texture of the given format supports setting pixel values."
  },
  "api/MicroWrath.Util.Unity.html": {
    "href": "api/MicroWrath.Util.Unity.html",
    "title": "Namespace MicroWrath.Util.Unity | MicroWrath",
    "keywords": "Namespace MicroWrath.Util.Unity Classes UnityUtil UnityUtil.Debug Diagnostics. Structs UnityUtil.ColorHSV Represents a HSV color value."
  },
  "api/MicroWrath.Util.html": {
    "href": "api/MicroWrath.Util.html",
    "title": "Namespace MicroWrath.Util | MicroWrath",
    "keywords": "Namespace MicroWrath.Util Classes AlignmentExtensions Character alignment extension methods AssetUtils Mod asset utility functions AssetUtils.Direct Direct referenced assets (BlueprintReferencedAssets) Functional Functional utilities GuidEx GUID utils Option Extension methods for Option<T> TranspilerUtil Structs Option<T> Struct representation of an optional value."
  },
  "api/MicroWrath.html": {
    "href": "api/MicroWrath.html",
    "title": "Namespace MicroWrath | MicroWrath",
    "keywords": "Namespace MicroWrath Classes Default Default values for common blueprint/componenet field types. Encyclopedia Encyclopedia Utils GeneratedGuid A source-generated named guid. InitAttribute Run this static void method on mod init. Note: Runs before harmony patches are applied. MicroBlueprint Extensions for IMicroBlueprint<TBlueprint> MicroBlueprintExtensions Extension methods for IMicroBlueprint<TBlueprint> MicroLogger Log wrapper for UMM or Owlcat logger. Triggers A set of useful IObservable<T> events. Structs Encyclopedia.Link Link to an encyclopedia page. See: Page MicroBlueprint<TBlueprint> A safe(r) wrapper/proxy for Kingmaker.Blueprints.BlueprintReference<T> MicroLogger.Entry OwlcatBlueprint<TBlueprint> Interfaces ILocalizedStringData Localized string metadata IMicroBlueprint<TBlueprint> Reference to a blueprint. This blueprint may not exist for the current initialization state. Enums Encyclopedia.Page MicroLogger.Severity"
  },
  "api/System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute.html",
    "title": "Class IgnoresAccessChecksToAttribute | MicroWrath",
    "keywords": "Class IgnoresAccessChecksToAttribute Namespace System.Runtime.CompilerServices Assembly MicroWrath.dll [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] internal sealed class IgnoresAccessChecksToAttribute : Attribute, _Attribute Inheritance object Attribute IgnoresAccessChecksToAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.Equals(object) Attribute.GetHashCode() Attribute.Match(object) Attribute.IsDefaultAttribute() Attribute.TypeId object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors IgnoresAccessChecksToAttribute(string) public IgnoresAccessChecksToAttribute(string assemblyName) Parameters assemblyName string"
  },
  "api/System.Runtime.CompilerServices.IsExternalInit.html": {
    "href": "api/System.Runtime.CompilerServices.IsExternalInit.html",
    "title": "Class IsExternalInit | MicroWrath",
    "keywords": "Class IsExternalInit Namespace System.Runtime.CompilerServices Assembly MicroWrath.dll internal static class IsExternalInit Inheritance object IsExternalInit Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone()"
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | MicroWrath",
    "keywords": "Namespace System.Runtime.CompilerServices Classes IgnoresAccessChecksToAttribute IsExternalInit"
  },
  "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.ArrayTraverse.html": {
    "href": "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.ArrayTraverse.html",
    "title": "Class ObjectDeepCopier.ArrayTraverse | MicroWrath",
    "keywords": "Class ObjectDeepCopier.ArrayTraverse Namespace TabletopTweaks.Core.Utilities Assembly MicroWrath.dll internal class ObjectDeepCopier.ArrayTraverse Inheritance object ObjectDeepCopier.ArrayTraverse Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Constructors ArrayTraverse(Array) public ArrayTraverse(Array array) Parameters array Array Fields Position public int[] Position Field Value int[] maxLengths private int[] maxLengths Field Value int[] Methods Step() internal bool Step() Returns bool"
  },
  "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.ReferenceEqualityComparer.html": {
    "href": "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.ReferenceEqualityComparer.html",
    "title": "Class ObjectDeepCopier.ReferenceEqualityComparer | MicroWrath",
    "keywords": "Class ObjectDeepCopier.ReferenceEqualityComparer Namespace TabletopTweaks.Core.Utilities Assembly MicroWrath.dll internal class ObjectDeepCopier.ReferenceEqualityComparer : EqualityComparer<object>, IEqualityComparer, IEqualityComparer<object> Inheritance object EqualityComparer<object> ObjectDeepCopier.ReferenceEqualityComparer Implements IEqualityComparer IEqualityComparer<object> Inherited Members EqualityComparer<object>.IndexOf(object[], object, int, int) EqualityComparer<object>.LastIndexOf(object[], object, int, int) EqualityComparer<object>.IEqualityComparer.GetHashCode(object) EqualityComparer<object>.IEqualityComparer.Equals(object, object) EqualityComparer<object>.Default object.ToString() object.Equals(object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods Equals(object, object) When overridden in a derived class, determines whether two objects of type object are equal. public override bool Equals(object x, object y) Parameters x object The first object to compare. y object The second object to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(object) When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table. public override int GetHashCode(object obj) Parameters obj object The object for which to get a hash code. Returns int A hash code for the specified object. Exceptions ArgumentNullException The type of obj is a reference type and obj is null."
  },
  "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.html": {
    "href": "api/TabletopTweaks.Core.Utilities.ObjectDeepCopier.html",
    "title": "Class ObjectDeepCopier | MicroWrath",
    "keywords": "Class ObjectDeepCopier Namespace TabletopTweaks.Core.Utilities Assembly MicroWrath.dll public class ObjectDeepCopier Inheritance object ObjectDeepCopier Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Extension Methods Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Action<T>, string?) Dynamic.CreateDynamicMonobehaviourProxy<T, TLink>(TLink, Func<T, T>, string?) Functional.Apply<T, U>(T, Func<T, U>) Functional.Downcast<T, U>(T) EnumerableExtensions.EmptyIfNull<T>(T?) EnumerableExtensions.Generate<TSource, T>(TSource, Func<TSource, Option<(T, TSource)>>) Option.ToOption<T>(T?) Methods Clone(object) public static object? Clone(object originalObject) Parameters originalObject object Returns object"
  },
  "api/TabletopTweaks.Core.Utilities.html": {
    "href": "api/TabletopTweaks.Core.Utilities.html",
    "title": "Namespace TabletopTweaks.Core.Utilities | MicroWrath",
    "keywords": "Namespace TabletopTweaks.Core.Utilities Classes ObjectDeepCopier"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | MicroWrath",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | MicroWrath",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | MicroWrath",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}